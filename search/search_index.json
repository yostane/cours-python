{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<ul> <li>English</li> </ul>","tags":["introduction"]},{"location":"#bienvenue-au-cours-de-developpement-en-python","title":"Bienvenue au cours de d\u00e9veloppement en Python","text":"","tags":["introduction"]},{"location":"#introduction","title":"Introduction","text":"","tags":["introduction"]},{"location":"#pre-requis","title":"Pr\u00e9-requis","text":"<ul> <li>Installer Python via un gestionnaire de paquets (je vous d\u00e9conseille d'utiliser l'installateur officiel)<ul> <li>Sous Windows via scoop ou le windows store.</li> <li>Sous macOS via homebrew, ou tea.</li> <li>Sous Linux via homebrew ou le gestionnaire de paquets de votre OS.</li> </ul> </li> <li>Visual studio Code (VSCode)</li> </ul>","tags":["introduction"]},{"location":"#ressources-et-liens-utiles","title":"Ressources et liens utiles","text":"<ul> <li>emojipedia</li> <li>Complete list of github markdown emoji markup</li> <li>mkdocs material</li> <li>prepbytes.com</li> </ul>","tags":["introduction"]},{"location":"#license-credits-et-remerciements","title":"License, cr\u00e9dits et remerciements","text":"<ul> <li>Le cours est r\u00e9alis\u00e9 avec MKDocs et Material for MKDocs</li> <li>Ce support de cours est disponible sous licence Creative Commons Attribution 4.0 International (CC BY 4.0)</li> <li>Certaines images sont g\u00e9n\u00e9r\u00e9es via IA (Hotpot.ai)</li> </ul>","tags":["introduction"]},{"location":"django-tour.en/","title":"Django tour.en","text":"<ul> <li>Fran\u00e7ais</li> </ul>"},{"location":"django-tour.en/#django-tour","title":"Django Tour","text":"<p>Django is a framework for developing web applications or REST APIs.</p> <p>In the following, we summarize the Django getting started tutorial.</p>"},{"location":"django-tour.en/#recommended-vs-code-extensions","title":"Recommended VS Code Extensions","text":"<p>Please read the configuration instructions for each extension:</p> <ul> <li>Template formatter and linter: monosans.djlint</li> <li>Template syntax highlighting: batisteo.vscode-django</li> </ul>"},{"location":"django-tour.en/#creating-and-starting-a-project","title":"Creating and Starting a Project","text":"<ul> <li>Preferably, create a virtual environment: <code>python3 -m venv venv</code> or <code>python -m venv venv</code></li> <li>Install the latest version of Django: <code>pip install Django==[version]</code> (this page helps find the latest version)</li> <li>Verify the installation: <code>python -m django --version</code></li> <li>Create a Django project: <code>django-admin startproject [project name]</code></li> <li>Start the development server with <code>python manage.py runserver</code> and open the link displayed by the command output.</li> <li>Project structure:</li> </ul> <pre><code>mysite/\n    manage.py # Project management script (do not modify this file)\n    mysite/ # Project information and settings\n        __init__.py # Allows Python to consider it as a module\n        settings.py # Project settings\n        urls.py # Routes managed by the project\n        asgi.py # Entry point for ASGI servers\n        wsgi.py # Entry point for WSGI servers\n</code></pre>"},{"location":"django-tour.en/#adding-an-application","title":"Adding an Application","text":"<ul> <li>A Django project contains several applications</li> <li>For Django, an application is a Python package that offers a set of functionalities (web pages, admin interface, REST API, middlewares, etc.)<ul> <li>Applications are meant to be autonomous and reusable in different projects.</li> </ul> </li> <li>The project we just created already uses some applications. You can check them in <code>settings.py</code></li> <li>Add a new application: <code>python manage.py startapp polls</code>. Check the content of the created folder.</li> <li> <p>We will add a page. To do this, follow these steps:</p> <ul> <li>Add a page in <code>views.py</code></li> </ul> <pre><code>from django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse(\"Hello, world. You're at the polls index.\")\n</code></pre> <ul> <li>Associate a route with the page we just created in <code>urls.py</code> (<code>\"\"</code> means the page will be associated with the root of the application)</li> </ul> <pre><code>from django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path(\"\", views.index, name=\"index\"),\n]\n</code></pre> <ul> <li>Since we haven't defined the application's route within the project yet, we need to do it now by updating the <code>[project name]/urls.py</code> file</li> </ul> <pre><code>from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    # the polls/ route uses the urls.py file from the polls folder (hence polls.urls)\n    path(\"polls/\", include(\"polls.urls\")), \n    path(\"admin/\", admin.site.urls),\n]\n</code></pre> </li> <li> <p>Open the page we just created using the URL: <code>[dev server URL]/[app path]</code>. In our case, it will be: <code>http://localhost:8000/polls/</code></p> </li> <li>Exercise: add a page <code>http://localhost:8000/polls/hello</code> that displays 'Hello World' in an <code>h1</code> tag</li> </ul>"},{"location":"django-tour.en/#databases","title":"Databases","text":"<ul> <li>Django uses a migrations mechanism to track changes in the database structure over time<ul> <li>This system is very convenient for upgrading the production application's database without manually applying changes made during development.</li> <li>It's similar to what Git does (tracking changes made to a file) which allows reconstructing the latest version of a file from its initial version by applying all changes made through different commits.</li> </ul> </li> <li>In Django, it works in three phases:<ol> <li>Define or update the models (equivalent to a table on the Django code side)</li> <li>Define the migration point from the current state of the models: <code>python manage.py makemigrations polls</code></li> <li>Apply the migrations to the databases linked to the application: <code>python manage.py migrate</code></li> </ol> </li> <li>Django manages the migrations of applications registered in the <code>INSTALLED_APPS</code> list in the <code>settings.py</code> file.</li> <li>Since the pre-registered applications have already defined their models and migration points, we just need to apply them to the project's database: <code>python manage.py migrate</code></li> <li>Check the content of the database (by default it's the <code>db.sqlite3</code> file)<ul> <li>\ud83d\udca1 It is possible to change the database in the <code>settings.py</code> file</li> </ul> </li> <li> <p>Next, we will add tables to the application we created earlier by following the three phases introduced above:</p> <ol> <li> <p>Define the models in <code>[app folder]/models.py</code></p> <pre><code>from django.db import models\n\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField(\"date published\")\n\nclass Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice_text = models.CharField(max_length=200)\n    votes = models.IntegerField(default=0)\n</code></pre> </li> <li> <p>In <code>settings.py</code>, add <code>\"polls.apps.PollsConfig\"</code> to the <code>INSTALLED_APPS</code> list. This allows us to use migrations. Define the migration point: <code>python manage.py makemigrations polls</code>. Monitor the console output.</p> <ul> <li>To check what will be generated if we execute this migration later: <code>python manage.py sqlmigrate polls 0001</code></li> </ul> </li> <li>Apply the migrations to the database: <code>python manage.py migrate</code></li> </ol> </li> </ul>"},{"location":"django-tour.en/#django-shell","title":"Django Shell","text":"<ul> <li>It is possible to test Django APIs and interact with our project from the terminal</li> <li>Run the command: <code>python manage.py shell</code> which opens an interactive Python prompt (displays results after each command) linked to our Django project.</li> <li>Execute the following commands one by one:</li> </ul> <pre><code>from polls.models import Choice, Question\n\n# Should display &lt;QuerySet []&gt; because the table is empty\nQuestion.objects.all() \n\nfrom django.utils import timezone\nq = Question(question_text=\"What's new?\", pub_date=timezone.now())\nq.save() # save to the database\nq.id # should display 1\nq.question_text\nq.pub_date\nq.question_text = \"What's up?\"\nq.save()\n# Should display &lt;QuerySet [&lt;Question: Question object (1)&gt;]&gt;\n# Note the Question object (1) which is not very readable\nQuestion.objects.all()\nq.choice_set.create(choice_text= \"Choice 1\", votes = 2)\nq.save()\n</code></pre> <ul> <li>To improve the display of objects within our project, define the <code>__str__(self):</code> method in each model class and try calling <code>Question.objects.all()</code> again.</li> </ul>"},{"location":"django-tour.en/#displaying-data-in-web-pages","title":"Displaying Data in Web Pages","text":"<ul> <li>This code displays questions and choices as bullet lists.</li> </ul> <pre><code>def index(request):\n    content = \"&lt;h1&gt;Questions&lt;/h1&gt;\"\n    content += \"&lt;ul&gt;\"\n    for question in Question.objects.all():\n        content += \"&lt;li&gt;\"\n        content += f\"{question.question_text} - {question.pub_date}. {question.choice_set.count()} choices\"\n        content += \"&lt;ul&gt;\"\n        str_choices = [\n            f\"&lt;li&gt;{c.choice_text} / {c.votes}&lt;/li&gt;\" for c in question.choice_set.all()\n        ]\n        content += \"\".join(str_choices)\n        content += \"&lt;/ul&gt;\"\n        content += \"&lt;/li&gt;\"\n    content += \"&lt;/ul&gt;\"\n    return HttpResponse(content)\n</code></pre> <p>List Comprehension</p> <p>This syntax allows generating a new list from an existing list.</p> <p>For example, <code>[x+1 for x in [1, 2, 3, 4]]</code> will generate the list <code>[1, 2, 3, 4, 5]</code>. Similarly, <code>[f\"&lt;li&gt;{c.choice_text} / {c.votes}&lt;/li&gt;\" for c in question.choice_set.all()]</code> will generate a list of strings.</p>"},{"location":"django-tour.en/#using-a-template","title":"Using a Template","text":"<ul> <li>So far, the HTML of the views is hard-coded in the code</li> <li>The recommended technique is to do the processing in the code and delegate the display to a specific HTML file called a template<ul> <li>This model is called the MVC (Model View Controller) model</li> </ul> </li> <li>Templates should be placed in <code>[app folder]/templates</code></li> </ul> <p>```py \"to be placed in views.py\" from django.shortcuts import render</p> <p>def showQuestionsWithTemplate(request):     context = {\"questions\": Question.objects.all()}     return render(request, \"questions.html\", context)</p>"},{"location":"django-tour.en/#add-pathquestions-viewsshowquestionswithtemplate-namequestions-in-urlspy","title":"add path(\"questions\", views.showQuestionsWithTemplate, name=\"questions\"), in urls.py","text":"<pre><code>```html \"to be placed in templates/questions.html\"\n</code></pre>"},{"location":"django-tour.en/#the-admin-application","title":"The Admin Application","text":"<ul> <li>The admin application offers a basic CRUD web interface</li> <li>Accessible from <code>[server URL]/admin</code>. It provides a login page<ul> <li>Users are managed via the auth application. We will come back to this later.</li> </ul> </li> <li>Add a superuser (like a root in Linux) <code>python manage.py createsuperuser</code></li> <li>Log in to the admin interface with the newly created account and perform some operations</li> <li>The tables offered by the admin interface come from the auth application which registered the ability to edit its tables from the admin interface</li> <li>Let's do the same with the tables of the application we created. In the <code>[app]/admin.py</code> file, add a line <code>admin.site.register([model(s)])</code><ul> <li>In our case, it will be: <code>admin.site.register([Question, Choice])</code></li> </ul> </li> </ul>"},{"location":"django-tour.en/#using-a-component-library","title":"Using a Component Library","text":""},{"location":"django-tour.en/#material-ui","title":"Material UI","text":"<p>It seems complicated at first</p> <ul> <li>Download the library: Add it to <code>requirements.txt</code> and rerun <code>pip install -r requirements.txt</code></li> <li>Activate the library: in <code>settings.py</code> add this app just before our own apps <code>\"theme_material_kit\"</code></li> <li>Apply the migration as we added a new app <code>python manage.py migrate</code></li> <li>Add the URLs provided by the app with the lowest priority: In the global <code>urls.py</code>, add <code>path(\"\", include('theme_material_kit.urls'))</code></li> </ul>"},{"location":"django-tour.en/#bulma","title":"Bulma","text":"<ul> <li>Follow the official documentation</li> <li>See an example of integration in the sample project</li> <li>Add Bulma styles to forms with django-bulma-form-templates</li> </ul>"},{"location":"django-tour.en/#registration-and-login-forms","title":"Registration and Login Forms","text":"<ul> <li><code>django.contrib.auth.forms</code> offers predefined forms like <code>AuthenticationForm</code> and <code>UserCreationForm</code></li> <li> <p>Custom template tags allow acting on the HTML rendering. This can be useful for inserting styles into forms before rendering them.</p> </li> <li> <p>Tutorial</p> </li> <li>Form templates</li> </ul>"},{"location":"django-tour.en/#resources","title":"Resources","text":"<ul> <li>Different methods for managing environments</li> <li>Managing environments with <code>django-environ</code></li> <li>Using Django with Multiple Databases</li> <li>Deployment checklist</li> </ul>"},{"location":"django-tour/","title":"Django tour","text":"<ul> <li>English</li> </ul>"},{"location":"django-tour/#django","title":"Django","text":"<p>Django est un Framework de d\u00e9veloppement de applications web ou d'APIs REST.</p> <p>Dans ce qui suite, nous r\u00e9sumons le tutoriel de d\u00e9marrage propos\u00e9 par Django.</p>"},{"location":"django-tour/#exensions-vs-code-recommandees","title":"Exensions VS Code recommand\u00e9es","text":"<p>Veuillez lire les instructions de configuration de chaque extension:</p> <ul> <li>Formatteur et linteur de templates: monosans.djlint</li> <li>Coloration syntaxique des templates: batisteo.vscode-django</li> </ul>"},{"location":"django-tour/#tutoriel-couvrant-les-bases","title":"Tutoriel couvrant les bases","text":""},{"location":"django-tour/#creation-et-demarrage-dun-projet","title":"Cr\u00e9ation et d\u00e9marrage d'un projet","text":"<ul> <li>De pr\u00e9f\u00e9rence, cr\u00e9er un environnement virtuel: <code>python3 -m venv venv</code> ou <code>python -m venv venv</code></li> <li>Installer la derni\u00e8re version de Django <code>pip install Django==[version]</code> (cette page permet de trouver la derni\u00e8re version)</li> <li>V\u00e9rifier que l'installation a r\u00e9ussi: <code>python -m django --version</code></li> <li>Cr\u00e9er un projet django: <code>django-admin startproject [nom du projet]</code></li> <li>D\u00e9marrer le serveur de d\u00e9veloppement avec <code>python manage.py runserver</code> et ouvrir le lien affich\u00e9 par la sortie de la commande.</li> <li>Structure du projet</li> </ul> <pre><code>mysite/\n    manage.py # Script de gestion du projet (fichier \u00e0 ne pas modifier)\n    mysite/ # Informations et param\u00e8tres du projet\n        __init__.py # Permet d'\u00eatre consid\u00e9r\u00e9 par Python comme un module\n        settings.py # Param\u00e8tres du projet\n        urls.py # Les routes que le projet g\u00e8re\n        asgi.py # Point d'ent\u00e9e pour les serveurs de type ASGI\n        wsgi.py # Point d'ent\u00e9e pour les serveurs de type WSGI\n</code></pre>"},{"location":"django-tour/#ajout-dune-application","title":"Ajout d'une application","text":"<ul> <li>Un projet Django contient plusieurs applications</li> <li>Pour Django, une application est un paquet Python qui proposer un ensemble de fonctionnalit\u00e9s (pages Web, Interface d'administration, API REST, Middlewares, etc.)<ul> <li>Les applications sont cens\u00e9es \u00eatre autonomes et r\u00e9utilisables dans diff\u00e9rents projets.</li> </ul> </li> <li>Le projet que vous venons de cr\u00e9er utilise d\u00e9j\u00e0 quelques applications. Vous pouvez les v\u00e9rifier dans <code>settings.py</code></li> <li>Ajouter une nouvelle application: <code>python manage.py startapp polls</code>. Consulter le contenu du dossier cr\u00e9\u00e9.</li> <li> <p>Nous allons ajouter une page. Pour ce faire, suivons ces \u00e9tapes:</p> <ul> <li>Ajouter une page dans <code>views.py</code></li> </ul> <pre><code>from django.http import HttpResponse\n\n\ndef index(request):\n    return HttpResponse(\"Hello, world. You're at the polls index.\")\n</code></pre> <ul> <li>Associer une route \u00e0 la page que nous venons de cr\u00e9er dans <code>urls.py</code> (<code>\"\"</code> signifie que la page sera associ\u00e9e \u00e0 la racine de l'application)</li> </ul> <pre><code>from django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path(\"\", views.index, name=\"index\"),\n]\n</code></pre> <ul> <li>Comme nous n'avons pas encore d\u00e9fini la route de l'application au sein du projet, il faut le faire maintenant en mettant \u00e0 jour le fichier <code>[nom du projet]/urls.py</code></li> </ul> <pre><code>from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    # la route polls/ utiliser le fichier urls.py du dossier polls (d'o\u00f9 le polls.urls)\n    path(\"polls/\", include(\"polls.urls\")), \n    path(\"admin/\", admin.site.urls),\n]\n</code></pre> </li> <li> <p>Ouvrir la page que nous venons de cr\u00e9er en utilisant l'url: <code>[url du servur de dev]/[chemon de l'app]</code>. Pour notre cas, ce sera: <code>http://localhost:8000/polls/</code></p> </li> <li>Exercice: ajouter une page <code>http://localhost:8000/polls/hello</code> qui affiche 'Hello World' dans une balise <code>h1</code></li> </ul>"},{"location":"django-tour/#bases-de-donnees","title":"Bases de donn\u00e9es","text":"<ul> <li>Django utilise un m\u00e9canisme de migrations qui permet de suivre les \u00e9volutions de la structure la BDD dans le temps<ul> <li>Ce syst\u00e8me est tr\u00e8s pratique pour permettre des mises \u00e0 niveau de la BDD de l'application de production sans avoir \u00e0 appliquer \u00e0 la main les changement faits durant le d\u00e9veloppement.</li> <li>C'est similaire \u00e0 ce que fait Git (qui m\u00e9morise les changements faits sur un fichier) qui permet de reconstruire la derni\u00e8re version d'un fichier en partant de sa version initiale et en appliquant tous les changement faits \u00e0 travers les diff\u00e9rents commits.</li> </ul> </li> <li>Sur Django, cela fonctionne en trois phases:<ol> <li>D\u00e9finir ou mettre \u00e0 jour les mod\u00e8les (\u00e9quivalent d'une table c\u00f4t\u00e9 code Django)</li> <li>D\u00e9finir le point de migration \u00e0 partir de l'\u00e9tat actuel des mod\u00e8les: <code>python manage.py makemigrations polls</code></li> <li>Appliquer les migrations aux bases de donn\u00e9es li\u00e9es \u00e0 l'application: <code>python manage.py migrate</code></li> </ol> </li> <li>Django sait g\u00e9rer les migrations des application enregistr\u00e9es dans la liste <code>INSTALLED_APPS</code> du fichier <code>settings.py</code>.</li> <li>Comme les applications pr\u00e9-resneign\u00e9es ont d\u00e9j\u00e0 d\u00e9fini leur mod\u00e8les et points de migration, il ne reste qu'a les appliquer \u00e0 la BDD du projet: <code>python manage.py migrate</code></li> <li>V\u00e9rifier le contenu de la BDD (par d\u00e9faut c'est le fichier <code>db.sqlite3</code>)<ul> <li>\ud83d\udca1 Il est possible de changer la BDD dans le fichier <code>settings.py</code></li> </ul> </li> <li> <p>Dans la suite, nous allons ajouter des tables dans l'application que nous avons cr\u00e9\u00e9 pr\u00e9c\u00e9demment en suivant donc les trois phases introduites plus haut:</p> <ol> <li> <p>D\u00e9finir les mod\u00e8les dans <code>[dossier de l'app]/models.py</code></p> <pre><code>from django.db import models\n\n\nclass Question(models.Model):\n    question_text = models.CharField(max_length=200)\n    pub_date = models.DateTimeField(\"date published\")\n\n\nclass Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    choice_text = models.CharField(max_length=200)\n    votes = models.IntegerField(default=0)\n</code></pre> </li> <li> <p>Dans settings.py, ajouter <code>\"polls.apps.PollsConfig\"</code> dans la liste <code>INSTALLTED_APPS</code>. Ceci nous permet d'utiliser les migrations. D\u00e9finissons le points de migration: <code>python manage.py makemigrations polls</code>. Surveiller la sortie de la console.</p> <ul> <li>Pour v\u00e9rifier qui sera g\u00e9n\u00e9r\u00e9 si on ex\u00e9cute cette migration par la suite: <code>python manage.py sqlmigrate polls 0001</code></li> </ul> </li> <li>Appliquer les migrations \u00e0 la BDD: <code>python manage.py migrate</code></li> </ol> </li> </ul>"},{"location":"django-tour/#shell-django","title":"Shell Django","text":"<ul> <li>Il est possible de tester les API de Django et agir sur notre projet depuis le terminal</li> <li>Lancer la commande : <code>python manage.py shell</code> qui ouvre un invite interactif (affiche les r\u00e9sultat apr\u00e8s chaque commande) Python li\u00e9 \u00e0 notre projet Django.</li> <li>Ex\u00e9cuter les commandes suivantes une par une:</li> </ul> <pre><code>from polls.models import Choice, Question\n\n# Devrait afficher &lt;QuerySet []&gt; car la table est vide\nQuestion.objects.all() \n\nfrom django.utils import timezone\nq = Question(question_text=\"What's new?\", pub_date=timezone.now())\nq.save() # enregistrer dans la BDD\nq.id # devrait afficher 1\nq.question_text\nq.pub_date\nq.question_text = \"What's up?\"\nq.save()\n# Devrait affichier &lt;QuerySet [&lt;Question: Question object (1)&gt;]&gt;\n# Noter le Question object (1) qui n'est pas tr\u00e8s lisible\nQuestion.objects.all()\nq.choice_set.create(choice_text= \"Choix 1\", votes = 2)\nq.save()\n</code></pre> <ul> <li>Afin d'am\u00e9liorer l'affichage des objets au sein de notre projet, d\u00e9finir la m\u00e9thode <code>__str__(self):</code> dans chacune des classes mod\u00e8les et r\u00e9essayer d'appeler un <code>Question.objects.all()</code>.</li> </ul>"},{"location":"django-tour/#affichage-des-donnees-dans-des-pages-web","title":"Affichage des donn\u00e9es dans des pages web","text":"<ul> <li>Ce code permet d'afficher les questions et les choix sous forme de listes \u00e0 puces.</li> </ul> <pre><code>def index(request):\n    content = \"&lt;h1&gt;Questions&lt;/h1&gt;\"\n    content += \"&lt;ul&gt;\"\n    for question in Question.objects.all():\n        content += \"&lt;li&gt;\"\n        content += f\"{question.question_text} - {question.pub_date}. {question.choice_set.count()} choix\"\n        content += \"&lt;ul&gt;\"\n        str_choices = [\n            f\"&lt;li&gt;{c.choice_text} / {c.votes}&lt;/li&gt;\" for c in question.choice_set.all()\n        ]\n        content += \"\".join(str_choices)\n        content += \"&lt;/ul&gt;\"\n        content += \"&lt;/li&gt;\"\n    content += \"&lt;/ul&gt;\"\n    return HttpResponse(content)\n</code></pre> <p>Compr\u00e9hension de listes</p> <p>Cette Syntaxe permet de g\u00e9n\u00e9rer une nouvelle liste \u00e0 partir d'une liste existante.</p> <p>Par exemple <code>[x+1 for x in [1, 2, 3, 4]]</code> g\u00e9n\u00e9rera la liste <code>[1, 2, 3, 4, 5]</code>. Sur le m\u00eame principe, <code>[f\"&lt;li&gt;{c.choice_text} / {c.votes}&lt;/li&gt;\" for c in question.choice_set.all()]</code> g\u00e9rera une liste de chaines de caract\u00e8res.</p>"},{"location":"django-tour/#utilisation-dun-template","title":"Utilisation d'un template","text":"<ul> <li>Jusqu'\u00e0 pr\u00e9sent, le HTML des vues est cod\u00e9 \"en dur\" dans le code</li> <li>La technique recommand\u00e9e est de faire les traitement dans le code et d\u00e9l\u00e9guer l'affichage \u00e0 un fichier HTML particulier qu'on appelle \"template\"<ul> <li>Ce mod\u00e8le est appel\u00e9 mod\u00e8le MVC (Model View Controller)</li> </ul> </li> <li>Les templates doivent \u00eatre plac\u00e9s dans <code>[dossier de l'app]/templates</code></li> </ul> \u00e0 mettre dans views.py<pre><code>from django.shortcuts import render\n\ndef showQuestionsWithTemplate(request):\n    context = {\"questions\": Question.objects.all()}\n    return render(request, \"questions.html\", context)\n\n# ajouter path(\"questions\", views.showQuestionsWithTemplate, name=\"questions\"), dans urls.py\n</code></pre> \u00e0 mettre dans templates/questions.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n    &lt;title&gt;Questions&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;a href=\"prompt-input\"&gt;Enter your prompt&lt;/a&gt;\n    &lt;h1&gt;Prompt list&lt;/h1&gt;\n    &lt;ul&gt;\n      {% for question in questions %}\n      &lt;li&gt;\n        {{ question.question_text }}. Date: {{ question.pub_date }}\n        &lt;ul&gt;\n          {% for choice in question.choice_set() %}\n          &lt;li&gt;&lt;/li&gt;\n          {% endfor %}\n        &lt;/ul&gt;\n      &lt;/li&gt;\n      {% endfor %}\n    &lt;/ul&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"django-tour/#exercices","title":"Exercices","text":"<ol> <li>Ajouter une page http://localhost:8000/ynav/hello qui affiche 'Hello World' dans une balise h1</li> <li>Ajouter une page http://localhost:8000/ynav/user/profile qui r\u00e9pond avec un html complet.<ul> <li>Exemple de contenu: <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Profile&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Profile&lt;/h1&gt;\n    &lt;p&gt;First Name: John&lt;/p&gt;\n    &lt;p&gt;Last Name: Doe&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre></li> <li>Astuce: Utiliser la fonction <code>HttpResponse</code> de Django et <code>\"\"\"</code> pour mettre du texte multi-lignes.<ul> <li>Exemple <pre><code>from django.http import HttpResponse\n\ndef profile(request):\n    return HttpResponse(\"\"\"&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Profile&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Profile&lt;/h1&gt;\n        &lt;p&gt;First Name: John&lt;/p&gt;\n        &lt;p&gt;Last Name: Doe&lt;/p&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\"\"\")\n</code></pre></li> </ul> </li> </ul> </li> <li>Cr\u00e9er une page qui affiche l'heure c\u00f4t\u00e9 serveur. Exemple: <code>Il est 12:00</code>.<ul> <li>Astuce: Utiliser la librairie <code>datetime</code> de Python.</li> <li>Exemple: <pre><code>import datetime\nt = f\"Il est {datetime.now().strftime('%H:%M')}\"\n</code></pre></li> </ul> </li> <li>Cr\u00e9er une page qui utilise un template pour afficher la valeur du query param p. Exemple: <code>http://localhost:8000/ynav/query?p=hello</code> affiche <code>hello</code>.<ul> <li>Astuce: Utiliser <code>request.GET.get('p')</code> pour r\u00e9cup\u00e9rer la valeur du param\u00e8tre p.</li> <li>Exemple: <pre><code>def query(request):\n    p = request.GET.get('p')\n    return render(request, 'query.html', {'p': p})\n</code></pre></li> </ul> </li> <li>Cr\u00e9er une page qui utiliser un template pour afficher le profil de l'utilisateur avec les valeurs des query params <code>first_name</code> et <code>last_name</code>. Exemple: <code>http://localhost:8000/ynav/query/profile?first_name=John&amp;last_name=Doe</code> affiche John Doe dans la page.</li> <li>Cr\u00e9er une page qui affiche tous entiers compris entre un mix et un max pass\u00e9s en query params. Exemple: <code>http://localhost:8000/ynav/query/range?min=1&amp;max=5</code> affiche <code>1 2 3 4 5</code>.<ul> <li>Afficher les entiers dans un liste \u00e0 puce (<code>&lt;ul&gt;</code>).</li> </ul> </li> <li>Cr\u00e9er une page qui affiche un formulaire avec un champ <code>name</code> et un bouton <code>submit</code>. Lorsque le formulaire est soumis, la page affiche <code>Hello &lt;name&gt;</code>. Exemple: <code>http://localhost:8000/ynav/form</code> affiche un formulaire avec un champ <code>name</code> et un bouton <code>submit</code>. Lorsque le formulaire est soumis avec le nom <code>John</code>, la page affiche <code>Hello John</code>. (astuce: cr\u00e9er une class <code>NameForm</code> qui h\u00e9rite de <code>forms.Form</code> et ajouter un champ <code>name</code> de type <code>forms.CharField</code>).</li> <li>Afficher une table de multiplication. Exemple: <code>http://localhost:8000/ynav/multiplication?n=5</code> affiche la table de multiplication de 5.     <pre><code>5 x 1 = 5\n5 x 2 = 10\n...\n5 x 10 = 50\n</code></pre></li> <li>Cr\u00e9er une table <code>Pakiman</code> avec les champs <code>name</code>, <code>type</code>, <code>level</code> (entier) et <code>attack</code> (entier). Cr\u00e9er une page qui permet d'ajouter des <code>Pakiman</code> \u00e0 la base de donn\u00e9es. Cr\u00e9er une page qui affiche tous les <code>Pakiman</code> de la base de donn\u00e9es. Cr\u00e9er une page qui affiche les <code>Pakiman</code> dont le niveau est sup\u00e9rieur au query param pass\u00e9 dans la requ\u00eate. Exemple: <code>http://localhost:8000/ynav/pakiman?level=5</code> affiche les <code>Pakiman</code> dont le niveau est sup\u00e9rieur \u00e0 5. <ul> <li>Astuce: Utiliser <code>models.Model</code> pour d\u00e9finir le mod\u00e8le <code>Pakiman</code>.</li> </ul> </li> </ol>"},{"location":"django-tour/#lapplication-admin","title":"L'application admin","text":"<ul> <li>L'application admin propose une interface web basique de type CRUD</li> <li>Accessible depuis <code>[URL du serveur]/admin</code>. Elle propose une page de connexion<ul> <li>Les utilisateurs sont g\u00e9r\u00e9s via l'application auth. On y reviendra plus tard.</li> </ul> </li> <li>Ajoutons un super utilisateur (comme un root dans Linux) <code>python manage.py createsuperuser</code></li> <li>Se connecter \u00e0 l'interface d'admin avec le compte nouvellement cr\u00e9\u00e9 et faire quelques manipulations</li> <li>Les tables propos\u00e9es par l'interface d'admin proviennent de l'application auth qui a enregistr\u00e9 la possibilit\u00e9 d'\u00e9diter ses tables depuis l'interface d'admin</li> <li>Faisons pareil avec les tables de l'application que nous avons cr\u00e9\u00e9. Dans le fichier <code>[app]/admin.py</code> ajouter une ligne <code>admin.site.register([mod\u00e8le(s)])</code><ul> <li>Pour notre cas ce sera: <code>admin.site.register([Question, Choice])</code></li> </ul> </li> </ul>"},{"location":"django-tour/#utilisation-dune-librairie-de-composants","title":"Utilisation d'une librairie de composants","text":""},{"location":"django-tour/#material-ui","title":"Material UI","text":"<p>\u00e7a semble compliqu\u00e9 \u00e0 priori</p> <ul> <li>T\u00e9l\u00e9charger la librairie: Ajouter dans <code>requirements.txt</code>  et relancer un <code>pip install -r requirements.txt</code></li> <li>Activer la librairie: dans <code>settings.py</code> ajouter cette app juste avant nos propres apps <code>\"theme_material_kit\"</code></li> <li>Appliquer la migration comme on a ajout\u00e9 une nouvelle app <code>pythom manage.py migrate</code></li> <li>Ajout des urls propos\u00e9es par l'app en derni\u00e8re priorit\u00e9: Dans le <code>urls.py</code> global, ajouter <code>path(\"\", include('theme_material_kit.urls'))</code></li> </ul>"},{"location":"django-tour/#bulma","title":"Bulma","text":"<ul> <li>Suivre la doc officielle</li> <li>Voir exemple d'int\u00e9gration dans le projet d'exemple</li> <li>Ajouter les styles bulma dans les formulaires avec django-bulma-form-templates</li> </ul>"},{"location":"django-tour/#formulaires-denregistrement-et-de-connexion","title":"Formulaires d'enregistrement et de connexion","text":"<ul> <li><code>django.contrib.auth.forms</code> propose des formulaires pr\u00e9d\u00e9finis comme les: <code>AuthenticationForm et UserCreationForm</code></li> <li> <p>Les custom template tags permettent d'agir sur le rendu html. Cela peut \u00eatre utile pour ins\u00e9rer des styles dans les formulaires avant d'en faire le rendu.</p> </li> <li> <p>tuto</p> </li> <li>Templates de formulaires</li> </ul>"},{"location":"django-tour/#ressources","title":"Ressources","text":"<ul> <li>Diff\u00e9rentes m\u00e9thodes pour g\u00e9rer les environnements</li> <li>Gestion des environnements avec <code>django-environ</code></li> <li>Using Django with Multiple Databases</li> <li>Checklist de d\u00e9ploiement</li> </ul>"},{"location":"index.en/","title":"Introduction","text":"<ul> <li>Fran\u00e7ais</li> </ul>","tags":["introduction"]},{"location":"index.en/#welcome-to-the-python-development-course","title":"Welcome to the \"Python Development\" course","text":"","tags":["introduction"]},{"location":"index.en/#introduction","title":"Introduction","text":"","tags":["introduction"]},{"location":"index.en/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Install Python via a package manager (I advise you not to use the official installer)</p> <ul> <li>Under Windows via scoop or the windows store.</li> <li>Under macOS via homebrew, or tea.</li> <li>Under Linux via homebrew or your OS package manager.</li> </ul> </li> <li> <p>Visual studio Code (VSCode)</p> </li> </ul>","tags":["introduction"]},{"location":"index.en/#resources-and-useful-links","title":"Resources and useful links","text":"<ul> <li>emojipedia</li> <li>Complete list of github markdown emoji markup</li> <li>mkdocs material</li> <li>prepbytes.com</li> </ul>","tags":["introduction"]},{"location":"index.en/#license-credits-and-acknowledgments","title":"License, credits and acknowledgments","text":"<ul> <li>The course is made with MKDocs and Material for MKDocs</li> <li>This course material is available under the Creative Commons Attribution 4.0 International (CC BY 4.0) license</li> <li>Some images are generated via AI (Hotpot.ai)</li> </ul>","tags":["introduction"]},{"location":"projects-type/","title":"Projets types","text":"<ul> <li>English: This page isn't translated to English.</li> </ul>"},{"location":"projects-type/#projects-types","title":"Projects types","text":"<p>Cette partie propose des exemples de mini-project ou projets qu'on peut donner en TP.</p>"},{"location":"projects-type/#ai-chat-en-django","title":"AI chat en Django","text":"<p>R\u00e9aliser un site web en Django de type chat avec un IA g\u00e9n\u00e9rative. La note de base est de 20 / 20 et un malus sera appliqu\u00e9 \u00e0 chaque besoin manquant.</p> <ul> <li>Utiliser un un mod\u00e8le d'IA en Python propos\u00e9 par huggingface (Il ne faut pas appeler d'API REST directement depuis votre code). (-10)</li> <li>Proposer une syst\u00e8me d'inscription et d'authentification. (-5)</li> <li>Proposer une belle UX (-5)</li> <li>Site stable et performant (-5)</li> <li>Site h\u00e9berg\u00e9 sur internet s'il est possible d'avoir un h\u00e9bergement avec au moins 20 GO de stockage pour pouvoir accueillir les mod\u00e8les (-5)</li> <li>Le site propose de dialoguer avec une IA g\u00e9n\u00e9rative (-10)</li> <li>Le site propose de dialoguer avec deuxi\u00e8me IA g\u00e9n\u00e9rative de type diff\u00e9rent (-5)</li> <li>Utilisation d'une base de donn\u00e9es (-4)</li> <li>Utilisation correcte de Django (-3)</li> </ul>"},{"location":"python-exercices.en/","title":"\ud83d\udcda Exercises","text":"<ul> <li>Fran\u00e7ais</li> </ul>"},{"location":"python-exercices.en/#exercises","title":"Exercises","text":"<p>Instructions</p> <ul> <li>Do not seek help from AI or genAI</li> </ul>"},{"location":"python-exercices.en/#series-1","title":"Series 1","text":"<ol> <li>Write a Python script that asks the user to enter an integer and displays whether the number is even or odd. \ud83d\udca1 Tip: use <code>n = int(input(\"Enter an integer: \"))</code></li> <li>Write a Python script that asks the user to enter an integer n and displays the sum of the first n integers (sum of integers from 0 to n inclusive).</li> <li>Write a Python script that asks the user to enter an integer and displays all the divisors of that number.</li> <li>Write a Python script that generates two random numbers x and y with 0 &lt;= x &lt;= 10 and x &lt;= y &lt;= 100. (tip: import <code>random</code> and call <code>x = random.randint(0, 10)</code>).</li> <li>Write a Python program that generates two random numbers x and y with 0 &lt;= x &lt;= 10 and x &lt;= y &lt;= 100. The program then displays the result of the integer division between y and x and the remainder of the division. (remember to handle the case where x = 0).</li> <li> <p>Write a program that displays as many characters as possible from a string in a pyramid sequence. (tip: you can use a for loop on a string <code>for char in string</code>).</p> <ul> <li>Example for the string \"abcdefghijklmnopqrstuvwxyz\" * 10</li> </ul> <pre><code>a \nbc \ndef \nghij \nklmno \npqrstu \nvwxyzab \ncdefghij \nklmnopqrs \ntuvwxyzabc \ndefghijklmn \nopqrstuvwxyz \nabcdefghijklm \nnopqrstuvwxyza \nbcdefghijklmnop \nqrstuvwxyzabcdef \nghijklmnopqrstuvw \nxyzabcdefghijklmno \npqrstuvwxyzabcdefgh \nijklmnopqrstuvwxyzab \ncdefghijklmnopqrstuvw \nxyzabcdefghijklmnopqrs\n</code></pre> </li> <li> <p>Write a function <code>count_letters(text)</code> that takes a string argument <code>text</code> and returns a dictionary containing the frequency of all letters in the input string. For example: <code>count_letters(\"hello\")</code> returns <code>{\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1}</code>.</p> </li> <li>Given rectangles defined with dictionaries where the keys are <code>\"x\", \"y\", \"width\", \"height\"</code>, where <code>x</code> and <code>y</code> are the coordinates of the rectangle (we suppose that the origin (0, 0) is the top left corner of the screen) and <code>width</code> and <code>height</code> are its dimensions in pixel units<ul> <li>Write a function <code>is_intersecting(rectangle1, rectangle2)</code> that returns <code>True</code> if there is an intersection between the two rectangles.</li> <li>Write a function <code>get_intersection(rectangle1, rectangle2)</code> that returns the intersecting rectangle if it exists, otherwise <code>None</code>.</li> </ul> </li> <li>Write a function <code>fx_square(x)</code> that returns the result of <code>x * x</code>.<ul> <li>Write a function <code>fx_square_list(n)</code> that returns a list of n elements. The value of an element at index <code>i</code> is <code>fx_square(i)</code>.</li> <li>Use the <code>matplotlib</code> library to draw a graph where the x-axis represents integers from 0 to n and the y-axis represents the elements returned by <code>fx_square_list(n)</code>.</li> </ul> </li> <li>Define a function <code>fx_square_list2(points)</code> that takes a list of integers sorted in ascending order and returns a new list where the value of the i-th element is <code>points[i] * points[i]</code>.<ul> <li>Plot the graph of f(x) = x * x for x ranging from -100 to 100.</li> </ul> </li> <li>Plot the graph from -100 to 100 for the following functions: <code>exp(x)</code>, <code>1/x</code>, <code>log(x) + (1/(x^3))</code></li> </ol>"},{"location":"python-exercices.en/#solutions-series-1","title":"Solutions Series 1","text":"Exercises 1 to 5 <pre><code>n = int(input(\"Saisir un entier : \"))\n\nprint(n, \"est\", \"pair\" if n % 2 == 0 else \"impair\")\nprint((\"pair\", \"impair\")[n % 2])\n\nsomme_n = 0\nfor i in range(n + 1):\n    somme_n += i\n\nprint(\"Somme des\", n, \"premiers entiers\", somme_n)\n\nfor i in range(1, n):\n    if n % i == 0:\n        print(i, \"est un diviseur de\", n)\n</code></pre> Exercises pyramid, count_letters, and intersection <pre><code>print([1, 2, 3] * 3)\nprint(\"hello\" * 2)\nprint(len([1, 2, 3]), len([1, 2, 3] * 3), len(\"hello\"))\n\n\n# abcdefghij\n# ligne 0 -&gt; a on prend la sous-chaine (0, 1)\n# ligne 1 -&gt; bc (1, 3)\n# ligne 2 -&gt; def (3, 6)\n# ligne 3 -&gt; ghij (6, 10)\n# ligne l -&gt; (indice courant dans la chaine, indice courant + l + 1)\n# indice courant s'incr\u00e9mente \u00e0 chaque fois de l + 1\n\n\ndef print_pyramide(input):\n    i = 0\n    current_line = 0\n    while i + current_line + 1 &lt; len(input):\n        print(input[i : i + current_line + 1])\n        i += current_line + 1\n        current_line += 1\n\n\nprint_pyramide(\"abcdefghij\")\nprint_pyramide(\"abcdefghijklmnopqrstuvwxyz\")\nprint_pyramide(\"abcdefghijklmnopqrstuvwxyz\" * 10)\n\n\ndef count_letters1(input):\n    dict = {}\n    for letter in input:\n        if letter in dict:\n            dict[letter] += 1\n        else:\n            dict[letter] = 1\n    return dict\n\n\ndef count_letters2(input):\n    dict = {}\n    for letter in input:\n        dict[letter] = dict.get(letter, 0) + 1\n    return dict\n\n\ndef count_letters3(input):\n    dict = {}\n    for letter in input:\n        dict[letter] = dict[letter] + 1 if letter in dict else 1\n    return dict\n\n\nprint(count_letters1(\"hello\"))\nprint(count_letters2(\"hello\"))\nprint(count_letters3(\"hello\"))\n\n\ndef is_intersect_1D(x1, l1, x2, l2):\n    # Dans d'autres langages, il aurait fallu \u00e9crire (On ne peut pas combiner les in\u00e9galit\u00e9s)\n    # x1 &lt; x2 &amp;&amp; x2 &lt; x1 + l1 || x2 &lt; x1 &amp;&amp; x1 &lt; x2 + l2\n    return x1 &lt;= x2 &lt;= x1 + l1 or x2 &lt;= x1 &lt;= x2 + l2\n\n\nprint(is_intersect_1D(0, 10, 3, 1))\nprint(is_intersect_1D(2, 5, 10, 4))\nprint(is_intersect_1D(-2, 5, 10, 4))\nprint(is_intersect_1D(0, 10, -10, 20))\nprint(is_intersect_1D(100, 1, -5, 1000))\nprint(is_intersect_1D(100, 1, -5, 106))\nprint(is_intersect_1D(100, 1, -5, 99))\n\n\ndef is_intersect_2D(rec1, rec2):\n    return is_intersect_1D(\n        rec1[\"x\"], rec1[\"width\"], rec2[\"x\"], rec2[\"width\"]\n    ) and is_intersect_1D(rec1[\"y\"], rec1[\"height\"], rec2[\"y\"], rec2[\"height\"])\n\n\nrec1 = {\"x\": 10, \"y\": 30, \"width\": 100, \"height\": 200}\nrec2 = {\"x\": -5, \"y\": 20, \"width\": 50, \"height\": 100}\nrec3 = {\"x\": 15, \"y\": 15, \"width\": 5, \"height\": 5}\nrec4 = {\"x\": 15, \"y\": 15, \"width\": 5, \"height\": 400}\nprint(\"testing intersect 2D\")\nprint(\"rec1, rec2\", is_intersect_2D(rec1, rec2))\nprint(\"rec1, rec3\", is_intersect_2D(rec1, rec3))\nprint(\"rec1, rec4\", is_intersect_2D(rec1, rec4))\nprint(\"rec2, rec3\", is_intersect_2D(rec2, rec3))\n</code></pre> plot <pre><code>import matplotlib.pyplot as plt\n\n\ndef fx_square(x):\n    return x**2\n\n\ndef fx_square_list(n):\n    items = []\n    for i in range(n):\n        items.append(fx_square(i))\n    return items\n\n\ndef plot_f(n):\n    plt.plot(range(n), fx_square_list(n))\n    plt.show()\n\n\nn = 88\nprint(fx_square_list(n))\nplot_f(n)\n\n\n# exemple de liste points: [-3, 0, 1, 4, 5]\n# Exemple de sortie attendue [9, 0, 1, 16, 25]\n\n\ndef fx_square_list2(points):\n    values = []\n    for point in points:\n        values.append(point**2)\n    return values\n\n\npoints = range(-100, 100)\nvalues = fx_square_list2(points)\nplt.plot(points, values)\nplt.show()\n</code></pre>"},{"location":"python-exercices.en/#series-2","title":"Series 2","text":"<p>Solve the following exercises using comprehensions.</p> <ol> <li>Create a list of the first 10 even numbers.</li> <li>Create a dictionary containing 10 keys ranging from 0 to 9. The value of each key is a text indicating the parity of the number. (example: {0: \"even\", 1: \"odd\", etc.})</li> <li>Create a dictionary containing 10 keys ranging from 0 to 9 converted to strings. The value of each key is a text indicating the parity of the number. (example: {\"0\": \"even\", \"1\": \"odd\", etc.})</li> <li>Create a dictionary that filters the previous dictionary, keeping only the odd numbers.</li> <li>Create a tuple that contains the first 20 even numbers.</li> <li>Given a list of students where each student is defined by a dictionary of this type <code>student = {\"name\": \"sasha\", \"birth_year\" = 2000}</code>:<ul> <li>Create a set of student names.</li> <li>Create a tuple containing the birth years of each student.</li> </ul> </li> <li>From a tuple of symbols <code>(\"\u2665\ufe0f\", \"\u2660\ufe0f\", \"\u2663\ufe0f\", \"\u2666\ufe0f\")</code> and a list of ranks <code>[\"Ace\", \"King\", \"Queen\", \"Jack\"] + [*range(2, 11)]</code>, create a deck of cards as a list of tuples which is the Cartesian product of the symbols and the ranks.</li> </ol> Solutions <pre><code># 1\nprint([x for x in range(0, 20, 2)])\nprint([x for x in range(0, 20) if x % 2 == 0])\n\n# 2\nprint({x: \"even\" if x % 2 == 0 else \"odd\" for x in range(10)})\n\n\ndef get_parity(x):\n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n\n\nprint({x: get_parity(x) for x in range(10)})\n\n# 3\nprint({str(x): \"even\" if x % 2 == 0 else \"odd\" for x in range(10)})\nprint({f\"{x}\": \"even\" if x % 2 == 0 else \"odd\" for x in range(10)})\n\n# 4\nnumbers = {f\"{x}\": \"even\" if x % 2 == 0 else \"odd\" for x in range(10)}\nprint({key: value for key, value in numbers.items() if int(key) % 2 != 0})\n\n# 5\nprint((x for x in range(0, 40, 2)))\n\n# cartes\nsymbols = (\"\u2665\ufe0f\", \"\u2660\ufe0f\", \"\u2663\ufe0f\", \"\u2666\ufe0f\")\nranks = [\"As\", \"Roi\", \"Reine\", \"Valet\"] + [*range(2, 11)]\n\ncards = [(symbol, rank) for symbol in symbols for rank in ranks]\nprint(cards)\n\n# 6\nstudents = [\n    {\"name\": \"Olive\", \"birth_year\": 2001},\n    {\"name\": \"Tom\", \"birth_year\": 1975},\n    {\"name\": \"Alf\", \"birth_year\": 1701},\n]\nprint({x[\"name\"] for x in students})\nprint(tuple(x[\"birth_year\"] for x in students))\n</code></pre>"},{"location":"python-exercices.en/#source","title":"Source","text":"<ul> <li>Exercices corrig\u00e9s d'algorithmique Python - Les bases</li> <li>Exercices du site d\u00e9veloppez</li> <li>Sorting Algorithms Animations</li> <li>Sites pour apprendre en s\u2019amusant</li> </ul>"},{"location":"python-exercices/","title":"\ud83d\udcda Exercices","text":"<ul> <li>English</li> </ul>"},{"location":"python-exercices/#exercices","title":"Exercices","text":"<p>Consignes</p> <ul> <li>Ne pas de faire aider par des IA ou genAI</li> </ul>"},{"location":"python-exercices/#serie-1","title":"S\u00e9rie 1","text":"<ol> <li>Ecrire un script Python qui demande \u00e0 l\u2019utilisateur de saisir un nombre entier et affiche si ce nombre est pair ou impair. \ud83d\udca1 Astuce: utiliser <code>n = int(input(\"Saisir un entier : \"))</code></li> <li>Ecrire un script Python qui demande \u00e0 l'utilisateur de saisir un entier n et affiche la somme des n premiers entiers (somme des entiers de 0 jusqu'\u00e0 n inclus).</li> <li>Ecrire un script Python qui demande \u00e0 l\u2019utilisateur de saisir un nombre entier et affiche tous les diviseurs de ce nombre.</li> <li>Ecrire un script Python qui g\u00e9n\u00e8re deux nombres al\u00e9atoires x et y avec 0 &lt;= x &lt;= 10 et x &lt;= y &lt;= 100. (astuce: importer <code>random</code> et appeler <code>x = random.randint(0, 10)</code>).</li> <li>Ecrire un programme Python qui g\u00e9n\u00e8re deux nombres al\u00e9atoires x et y avec 0 &lt;= x &lt;= 10 et x &lt;= y &lt;= 100. Le programme affiche ensuite le r\u00e9sultat de la division enti\u00e8re entre y et x et le reste de la division. (penser \u00e0 g\u00e9rer le cas o\u00f9 x = 0).</li> <li> <p>Ecrire un programme qui affiche autant de caract\u00e8res que possible d'une cha\u00eene de caract\u00e8res  sous forme de suite pyramidale. (astuce: on peut faire un for in sur une cha\u00eene de caract\u00e8res <code>for char in chaine</code>).</p> <ul> <li>Exemple pour la cha\u00eene \"abcdefghijklmnopqrstuvwxyz\" * 10</li> </ul> <pre><code>a \nbc \ndef \nghij \nklmno \npqrstu \nvwxyzab \ncdefghij \nklmnopqrs \ntuvwxyzabc \ndefghijklmn \nopqrstuvwxyz \nabcdefghijklm \nnopqrstuvwxyza \nbcdefghijklmnop \nqrstuvwxyzabcdef \nghijklmnopqrstuvw \nxyzabcdefghijklmno \npqrstuvwxyzabcdefgh \nijklmnopqrstuvwxyzab \ncdefghijklmnopqrstuvw \nxyzabcdefghijklmnopqrs\n</code></pre> <ul> <li>R\u00e9ponse incorrecte pour la \"abcdefghijklmnopqrstuvwxyz\"</li> </ul> <pre><code>Incorrect\na \nbc \ndef \nghij \nklmno \npqrstu \nvwxyz\n\nCorrect\na \nbc \ndef \nghij \nklmno \npqrstu \n</code></pre> </li> <li> <p>\u00c9crire une fonction <code>count_letters(texte)</code> ayant pour argument une cha\u00eene de caract\u00e8res texte et qui renvoie un dictionnaire qui contient la fr\u00e9quence de toutes les lettres de la cha\u00eene entr\u00e9e. Par exemple: <code>count_letters(\"hello\")</code> renvoie <code>{\"h\": 1, \"e\": 1, \"l\": 2, \"o\": 1}</code>.</p> </li> <li>Soit des rectangles d\u00e9finis avec des dictionnaires dont les cl\u00e9s sont <code>\"x\", \"y\", \"largeur\", \"hauteur\"</code>.<ul> <li>Ecrire une fonction <code>is_intersecting(rectangle1, rectangle2)</code> qui retourne <code>True</code> s'il y a intersection entre les deux rectangles.</li> <li>Ecrire une fonction <code>get_intersection(rectangle1, rectangle2)</code> qui retourne le rectangle intersection s'il existe, sinon <code>None</code>.</li> </ul> </li> <li>Ecrire une fonction <code>fx_square(x)</code> qui retourne le r\u00e9sultat de <code>x * x</code>.<ul> <li>Ecrire une fonction <code>fx_square_list(n)</code> qui retourne une liste de n \u00e9l\u00e9ments. La valeur d'un \u00e9l\u00e9ment d'indice <code>i</code> est <code>fx_square(i)</code>.</li> <li>Utiliser la librairie <code>matplotlib</code> pour dessiner un graphique dont les abscisses sont les entiers allant de 0 \u00e0 n et les ordonn\u00e9es sont les \u00e9l\u00e9ments retourn\u00e9s par <code>fx_square_list(n)</code>.</li> </ul> </li> <li>D\u00e9finir une fonction <code>fx_square_list2(points)</code> qui prend en argument une liste d'entiers ordonn\u00e9es par ordre croissant et retourne une nouvelle liste dont la valeur du i \u00e8me \u00e9l\u00e9ment est <code>points[i] * points[i]</code>.<ul> <li>Tracer le graphique de f(x) = x * x pour x compris entre -100 \u00e0 100.</li> </ul> </li> <li>Faire le graphique de -100 \u00e0 100 des fonctions suivantes: <code>exp(x)</code>, <code>1/x</code>, <code>log(x) + (1/(x puissance3))</code></li> </ol>"},{"location":"python-exercices/#corriges-serie-1","title":"Corrig\u00e9s s\u00e9rie 1","text":"Exos de 1 \u00e0 5 <pre><code>n = int(input(\"Saisir un entier : \"))\n\nprint(n, \"est\", \"pair\" if n % 2 == 0 else \"impair\")\nprint((\"pair\", \"impair\")[n % 2])\n\nsomme_n = 0\nfor i in range(n + 1):\n    somme_n += i\n\nprint(\"Somme des\", n, \"premiers entiers\", somme_n)\n\nfor i in range(1, n):\n    if n % i == 0:\n        print(i, \"est un diviseur de\", n)\n</code></pre> Exos pyramide, count_letters et intersection <pre><code>print([1, 2, 3] * 3)\nprint(\"hello\" * 2)\nprint(len([1, 2, 3]), len([1, 2, 3] * 3), len(\"hello\"))\n\n\n# abcdefghij\n# ligne 0 -&gt; a on prend la sous-chaine (0, 1)\n# ligne 1 -&gt; bc (1, 3)\n# ligne 2 -&gt; def (3, 6)\n# ligne 3 -&gt; ghij (6, 10)\n# ligne l -&gt; (indice courant dans la chaine, indice courant + l + 1)\n# indice courant s'incr\u00e9mente \u00e0 chaque fois de l + 1\n\n\ndef print_pyramide(input):\n    i = 0\n    current_line = 0\n    while i + current_line + 1 &lt; len(input):\n        print(input[i : i + current_line + 1])\n        i += current_line + 1\n        current_line += 1\n\n\nprint_pyramide(\"abcdefghij\")\nprint_pyramide(\"abcdefghijklmnopqrstuvwxyz\")\nprint_pyramide(\"abcdefghijklmnopqrstuvwxyz\" * 10)\n\n\ndef count_letters1(input):\n    dict = {}\n    for letter in input:\n        if letter in dict:\n            dict[letter] += 1\n        else:\n            dict[letter] = 1\n    return dict\n\n\ndef count_letters2(input):\n    dict = {}\n    for letter in input:\n        dict[letter] = dict.get(letter, 0) + 1\n    return dict\n\n\ndef count_letters3(input):\n    dict = {}\n    for letter in input:\n        dict[letter] = dict[letter] + 1 if letter in dict else 1\n    return dict\n\n\nprint(count_letters1(\"hello\"))\nprint(count_letters2(\"hello\"))\nprint(count_letters3(\"hello\"))\n\n\ndef is_intersect_1D(x1, l1, x2, l2):\n    # Dans d'autres langages, il aurait fallu \u00e9crire (On ne peut pas combiner les in\u00e9galit\u00e9s)\n    # x1 &lt; x2 &amp;&amp; x2 &lt; x1 + l1 || x2 &lt; x1 &amp;&amp; x1 &lt; x2 + l2\n    return x1 &lt;= x2 &lt;= x1 + l1 or x2 &lt;= x1 &lt;= x2 + l2\n\n\nprint(is_intersect_1D(0, 10, 3, 1))\nprint(is_intersect_1D(2, 5, 10, 4))\nprint(is_intersect_1D(-2, 5, 10, 4))\nprint(is_intersect_1D(0, 10, -10, 20))\nprint(is_intersect_1D(100, 1, -5, 1000))\nprint(is_intersect_1D(100, 1, -5, 106))\nprint(is_intersect_1D(100, 1, -5, 99))\n\n\ndef is_intersect_2D(rec1, rec2):\n    return is_intersect_1D(\n        rec1[\"x\"], rec1[\"width\"], rec2[\"x\"], rec2[\"width\"]\n    ) and is_intersect_1D(rec1[\"y\"], rec1[\"height\"], rec2[\"y\"], rec2[\"height\"])\n\n\nrec1 = {\"x\": 10, \"y\": 30, \"width\": 100, \"height\": 200}\nrec2 = {\"x\": -5, \"y\": 20, \"width\": 50, \"height\": 100}\nrec3 = {\"x\": 15, \"y\": 15, \"width\": 5, \"height\": 5}\nrec4 = {\"x\": 15, \"y\": 15, \"width\": 5, \"height\": 400}\nprint(\"testing intersect 2D\")\nprint(\"rec1, rec2\", is_intersect_2D(rec1, rec2))\nprint(\"rec1, rec3\", is_intersect_2D(rec1, rec3))\nprint(\"rec1, rec4\", is_intersect_2D(rec1, rec4))\nprint(\"rec2, rec3\", is_intersect_2D(rec2, rec3))\n</code></pre> plot <pre><code>import matplotlib.pyplot as plt\n\n\ndef fx_square(x):\n    return x**2\n\n\ndef fx_square_list(n):\n    items = []\n    for i in range(n):\n        items.append(fx_square(i))\n    return items\n\n\ndef plot_f(n):\n    plt.plot(range(n), fx_square_list(n))\n    plt.show()\n\n\nn = 88\nprint(fx_square_list(n))\nplot_f(n)\n\n\n# exemple de liste points: [-3, 0, 1, 4, 5]\n# Exemple de sortie attendue [9, 0, 1, 16, 25]\n\n\ndef fx_square_list2(points):\n    values = []\n    for point in points:\n        values.append(point**2)\n    return values\n\n\npoints = range(-100, 100)\nvalues = fx_square_list2(points)\nplt.plot(points, values)\nplt.show()\n</code></pre>"},{"location":"python-exercices/#serie-2","title":"S\u00e9rie 2","text":"<p>R\u00e9soudre les exercices suivants avec les compr\u00e9hensions.</p> <ol> <li>Cr\u00e9er une liste des 10 premiers nombres pairs</li> <li>Cr\u00e9er un dictionnaire contentant 10 cl\u00e9s allant de 0 \u00e0 9. La valeur de chaque cl\u00e9 est un texte indiquant la parit\u00e9 du nombre. (exemple: {0: \"paire\", 1: \"impaire\", etc.})</li> <li>Cr\u00e9er un dictionnaire contentant 10 cl\u00e9 allant de 0 \u00e0 9 convertie en string. La valeur de chaque cl\u00e9 est une texte indiquant la parit\u00e9 du nombre. (exemple: {\"0\": \"paire\", \"1\": \"impaire\", etc.})</li> <li>Cr\u00e9er un dictionnaire qui filtre le dictionnaire pr\u00e9c\u00e9dent en ne gardant que les nombres impairs</li> <li>Cr\u00e9er un tuple qui contient les 20 premiers nombres pairs.</li> <li>Soit une liste d'\u00e9tudiants ou chaque \u00e9tudiant est d\u00e9fini par un dictionnaire de noms et dates de naissance. Par exemple:      <pre><code>students = [\n    {\"name\": \"Olive\", \"birth_year\": 2001},\n    {\"name\": \"Tom\", \"birth_year\": 1975},\n    {\"name\": \"Alf\", \"birth_year\": 1701},\n]\n</code></pre><ul> <li>Cr\u00e9er un ensemble des noms des \u00e9tudiants.</li> <li>Cr\u00e9er un tuple contenant les ann\u00e9es de naissance de chaque \u00e9tudiant.</li> <li>Afficher les noms des \u00e9tudiants n\u00e9s apr\u00e8s 2000.</li> <li>On suppose que les \u00e9tudiants n\u00e9s avant 1980 ont comme souhait de m\u00e9tier est d'\u00eatre lead dev tandis que les autres veulent \u00eatre des d\u00e9veloppeurs. G\u00e9n\u00e9rer une liste de dictionnaires des noms et son de m\u00e9tier \u00e0 partir du dictionnaire d'origine.<ul> <li>Exemple: <code>[{\"name\": \"Olive\", \"job\": \"dev\"}, {\"name\": \"Tom\", \"job\": \"lead dev\"}, {\"name\": \"Alf\", \"job\": \"lead dev\"}]</code></li> </ul> </li> </ul> </li> <li>A partir d'un tuple de symboles <code>(\"\u2665\ufe0f\", \"\u2660\ufe0f\", \"\u2663\ufe0f\", \"\u2666\ufe0f\")</code> et de la liste de rangs <code>[\"As\", \"Roi\", \"Reine\", \"Valet\"] + [*range(2, 11)]</code>. Cr\u00e9er un jeu de cartes sous forme d'une liste de tuples qui est le produit cart\u00e9sien entre les symboles et le rang.</li> <li>Cr\u00e9er une liste de tuples contenant les coordonn\u00e9es des points (x, y) pour x allant de 0 \u00e0 10 et y allant de 0 \u00e0 10.<ul> <li>Exemple: <code>[(0, 0), (0, 1), ..., (10, 10)]</code></li> </ul> </li> <li>Cr\u00e9er une liste de tuples contenant les coordonn\u00e9es des points (x, y) pour x allant de 0 \u00e0 10 et y allant de 0 \u00e0 10. Filtrer les points pour ne garder que ceux dont la somme des coordonn\u00e9es est paire.<ul> <li>Exemple: <code>[(0, 0), (0, 2), (0, 4), ..., (10, 10)]</code></li> </ul> </li> <li>Cr\u00e9er une liste de tuples contenant les coordonn\u00e9es des points (x, y) pour x allant de 0 \u00e0 10 et y allant de 0 \u00e0 10. Filtrer les points pour ne garder que ceux dont la somme des coordonn\u00e9es est paire et x est sup\u00e9rieur \u00e0 y.<ul> <li>Exemple: <code>[(2, 0), (4, 0), (4, 2), ..., (10, 8)]</code></li> </ul> </li> <li>G\u00e9n\u00e9rer une liste de 10 nombres al\u00e9atoires entre 0 et 100.</li> <li>Soit une liste de cha\u00eenes de caract\u00e8res <code>[\"hello\", \"world\", \"python\", \"is\", \"cool\"]</code>. Cr\u00e9er une liste de tuples contenant la cha\u00eene de caract\u00e8res et sa longueur.<ul> <li>Exemple: <code>[(\"hello\", 5), (\"world\", 5), (\"python\", 6), (\"is\", 2), (\"cool\", 4)]</code></li> </ul> </li> </ol> Solutions <pre><code># 1\nprint([x for x in range(0, 20, 2)])\nprint([x for x in range(0, 20) if x % 2 == 0])\n\n# 2\nprint({x: \"even\" if x % 2 == 0 else \"odd\" for x in range(10)})\n\n\ndef get_parity(x):\n    if x % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n\n\nprint({x: get_parity(x) for x in range(10)})\n\n# 3\nprint({str(x): \"even\" if x % 2 == 0 else \"odd\" for x in range(10)})\nprint({f\"{x}\": \"even\" if x % 2 == 0 else \"odd\" for x in range(10)})\n\n# 4\nnumbers = {f\"{x}\": \"even\" if x % 2 == 0 else \"odd\" for x in range(10)}\nprint({key: value for key, value in numbers.items() if int(key) % 2 != 0})\n\n# 5\nprint((x for x in range(0, 40, 2)))\n\n# cartes\nsymbols = (\"\u2665\ufe0f\", \"\u2660\ufe0f\", \"\u2663\ufe0f\", \"\u2666\ufe0f\")\nranks = [\"As\", \"Roi\", \"Reine\", \"Valet\"] + [*range(2, 11)]\n\ncards = [(symbol, rank) for symbol in symbols for rank in ranks]\nprint(cards)\n\n# 6\nstudents = [\n    {\"name\": \"Olive\", \"birth_year\": 2001},\n    {\"name\": \"Tom\", \"birth_year\": 1975},\n    {\"name\": \"Alf\", \"birth_year\": 1701},\n]\nprint({x[\"name\"] for x in students})\nprint(tuple(x[\"birth_year\"] for x in students))\n</code></pre>"},{"location":"python-exercices/#source","title":"Source","text":"<ul> <li>Exercices corrig\u00e9s d'algorithmique Python - Les bases</li> <li>Exercices du site d\u00e9veloppez</li> <li>Sorting Algorithms Animations</li> <li>Sites pour apprendre en s\u2019amusant</li> </ul>"},{"location":"python-func-exercices/","title":"Exerices en prog. fonc.","text":"<ul> <li>English: This page isn't translated to English.</li> </ul>"},{"location":"python-func-exercices/#exercices","title":"Exercices","text":"<p>Consignes</p> <ul> <li>Ne pas de faire aider par des IA ou genAI</li> </ul>"},{"location":"python-func-exercices/#serie-1","title":"S\u00e9rie 1","text":""},{"location":"python-func/","title":"Programmation fonctionnelle","text":"<ul> <li>English: This page isn't translated to English.</li> </ul>"},{"location":"python-func/#programmation-fonctionnelle","title":"Programmation fonctionnelle","text":"<ul> <li>Les fonctions sont des \u00e9l\u00e9ments de premi\u00e8re classe : Les fonctions sont comme des variables</li> <li>Utilisation intensive de fonctions pures : fonction sans effet de bord, toujours le m\u00eame r\u00e9sultat pour les m\u00eames entr\u00e9es<ul> <li>exemples de fonctions par pure: print (car elle change la console)</li> </ul> </li> <li>Immutabilit\u00e9<ul> <li>On ne peut pas changer la valeur d'une variable une fois initialis\u00e9e</li> <li>On ne peut pas changer les propri\u00e9t\u00e9s d'un object une fois instanci\u00e9</li> <li>On ne peut pas ajouter ou supprimer des \u00e9l\u00e9ments d'une collection</li> </ul> </li> <li>On le code est d\u00e9velopp\u00e9 sous forme d'une cha\u00eene de traitements (comme dans une usine)</li> </ul>"},{"location":"python-func/#relation-entre-la-poo-et-la-programmation-fonctionnelle","title":"Relation entre la POO et la programmation fonctionnelle","text":"<ul> <li>La POO est la prog. fonctionnelle ne sont pas mutuellement exclusifs</li> <li>On peut d\u00e9velopper en POO avec un style fonctionnelle:<ul> <li>Les m\u00e9thodes ne font pas de mutation de champs de l'objet</li> <li>Les propri\u00e9t\u00e9s sont uniquement en read-only</li> <li>Les <code>records</code> simplifient la cr\u00e9ation de ce genre de classes</li> </ul> </li> </ul>"},{"location":"python-poo-exercices/","title":"Exerices en POO","text":"<ul> <li>English: This page isn't translated to English.</li> </ul>"},{"location":"python-poo-exercices/#exercices-en-poo","title":"Exercices en POO","text":"<p>Consignes</p> <ul> <li>Ne pas de faire aider par des IA ou genAI</li> </ul>"},{"location":"python-poo-exercices/#serie-1","title":"S\u00e9rie 1","text":"<ol> <li>Cr\u00e9er une classe <code>Personne</code> avec les attributs <code>nom</code>, <code>prenom</code> et <code>age</code>. Ajouter une m\u00e9thode <code>afficher</code> qui affiche les informations de la personne. Impl\u00e9menter les m\u00e9thodes <code>__eq__</code> et <code>__str__</code>.<ul> <li>Cr\u00e9er deux personnes et les afficher.</li> </ul> </li> <li>Cr\u00e9er une classe <code>StringUtils</code> qui contient les m\u00e9thodes statiques suivantes:<ul> <li><code>is_palindrome(word: str) -&gt; bool</code> qui retourne <code>True</code> si le mot est un palindrome, <code>False</code> sinon</li> <li><code>count_vowels(word: str) -&gt; int</code> qui retourne le nombre de voyelles dans le mot</li> <li><code>count_uppercase(word: str) -&gt; int</code> qui retourne le nombre de majuscules dans le mot</li> <li><code>count_lowercase(word: str) -&gt; int</code> qui retourne le nombre de minuscules dans le mot</li> </ul> </li> </ol>"},{"location":"python-poo.en/","title":"Object Oriented Programming","text":"<ul> <li>Fran\u00e7ais</li> </ul>"},{"location":"python-poo.en/#object-oriented-programming","title":"Object oriented programming","text":"<p>The OOP paradigm sees the program as a collection of objects that interact with each other.</p>"},{"location":"python-poo.en/#classes-objects-and-inheritance","title":"Classes, objects, and inheritance","text":"<ul> <li>Each object is defined by a class, which itself can inherit from other classes or interfaces.</li> <li>A class can define properties and methods, which are called members.<ul> <li>Property: a view on data through its read and/or write accessors (called getters and setters, respectively).</li> <li>Method: a function defined within the class.</li> <li>Constructor: a special method that is automatically called when an instance is created.</li> </ul> </li> <li>In Python, the first argument of methods and the constructor is a reference to the current object.<ul> <li>The name of this argument must be <code>self</code> (called <code>this</code> in other languages).</li> <li><code>self</code> is called the method's context.</li> </ul> </li> <li>A child class can inherit from a parent class:<ul> <li>In this case, the child class implicitly contains all the members of the parent class.</li> <li>The child class can define additional members that are specific to it.</li> <li>The child class can override members of the parent class. This is called overriding.</li> </ul> </li> <li>Python is one of the few languages (along with C++) that allows multiple inheritance, i.e., a class can inherit from multiple classes at the same time.</li> </ul> <pre><code>class Rectangle:\n    def __init__(self, x, y, width, height):\n        self.x = x\n        self.y = y\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\n    def perimeter(self):\n        return (self.width + self.height) * 2\n\n    def __str__(self):\n        return f\"x: {self.x}, ...\"\n\n\nr = Rectangle(10, 1, 100, 5)\nprint(r)\n</code></pre> <pre><code>class Person:\n    # constructeur\n    # self est l'\u00e9quivalent du this dans les autres langages\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def say_name(self):\n        print(self.name)\n\n    def __str__(self):\n        return f\"Person: {self.name} - {self.age}\"\n\n\nclass Student(Person):\n    def __init__(self, num_student, name, age):\n        self.num_student = num_student\n        # appel du constrcteur parent\n        super().__init__(name, age)\n\n    def __str__(self):\n        return f\"Student {self.num_student}, Parent __str__:\" + super().__str__()\n\n\npDico = {\"name\": \"dfsdfs\", \"age\": 230}\n\np1 = Person(\"John\", 36)\n\nprint(p1.name)\nprint(p1.age)\np1.age = 10\np1.say_name()\nprint(p1, pDico)\n\ns = Student(\"2323JFLSJ\", \"A\", 19)\nprint(s)\n</code></pre>"},{"location":"python-poo.en/#static-and-abstract-concepts","title":"Static and abstract concepts","text":"<ul> <li>Static property, method, or class:<ul> <li>Instance property: each instance has its own instance properties.</li> <li>Static property: it is shared among all instances (like a global variable for the class).</li> <li>Instance method: it is executed in the context of the instance that called it (accessible via <code>self</code>).</li> <li>Static method: a method that only has access to the static properties and methods of its class.</li> <li>Static class: a class that cannot be instantiated and only contains static properties and methods.</li> </ul> </li> <li>Abstract method, property, and class:<ul> <li>Abstract method: a method that has no implementation.</li> <li>Abstract property: a property whose accessors are not defined.</li> <li>Abstract class: a class that has at least one abstract property or method.</li> <li>Abstract members are intended to be defined by a non-abstract subclass.</li> </ul> </li> </ul>"},{"location":"python-poo/","title":"Programmation orient\u00e9e objet","text":"<ul> <li>English</li> </ul>"},{"location":"python-poo/#programmation-orientee-objet","title":"Programmation orient\u00e9e objet","text":"<p>Le paradigme OOP voit le programme comme un ensemble d'objets qui interagissent entre eux.</p>"},{"location":"python-poo/#classes-objets-et-heritage","title":"Classes, objets et h\u00e9ritage","text":"<ul> <li>Chaque object est d\u00e9fini par une classe qui elle m\u00eame h\u00e9riter d'autres classes ou interfaces.</li> <li>Une classes peut d\u00e9finir des propri\u00e9t\u00e9s et des m\u00e9thodes, qu'on appelle des membres.<ul> <li>Propri\u00e9t\u00e9 : une vue sur une donn\u00e9e via ses accesseurs en lecture et / ou \u00e9criture (qu'on appelle getters et setter respectivement).</li> <li>M\u00e9thode : fonction qui est d\u00e9finie au sein de la classe</li> <li>Constructeur: m\u00e9thode particuli\u00e8re qui sera appel\u00e9e automatiquement au moment de la cr\u00e9ation de l'instance</li> </ul> </li> <li>En python, le premier argument des m\u00e9thodes et du constructeur est une r\u00e9f\u00e9rence vers l'objet actuel<ul> <li>Le nom de cet argument doit s'appeler <code>self</code> (appel\u00e9 <code>this</code> dans d'autres langages)</li> <li>On appelle <code>self</code> le contexte de la m\u00e9thode</li> </ul> </li> <li>Une classe enfant peut h\u00e9riter d'une classe parente:<ul> <li>Dans ce cas, la classe enfant contiendra implicitement tous les membres de la classe m\u00e8re</li> <li>La classe enfant peut d\u00e9finir des membres suppl\u00e9mentaires qui lui seront propres</li> <li>La classe enfant peut red\u00e9finir des membres de classe parent. On appelle cela une surcharge ou override en Anglais.</li> </ul> </li> <li>Python est l'un des rares langages (avec le C++) \u00e0 permettre l'h\u00e9ritage multiple. i.e. une classe peut h\u00e9riter de plusieurs classes \u00e0 la fois.</li> </ul> <pre><code>class Rectangle:\n    def __init__(self, x, y, width, height):\n        self.x = x\n        self.y = y\n        self.width = width\n        self.height = height\n\n    def area(self):\n        return self.width * self.height\n\n    def perimeter(self):\n        return (self.width + self.height) * 2\n\n    def __str__(self):\n        return f\"x: {self.x}, ...\"\n\n\nr = Rectangle(10, 1, 100, 5)\nprint(r)\n</code></pre> <pre><code>class Person:\n    # constructeur\n    # self est l'\u00e9quivalent du this dans les autres langages\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def say_name(self):\n        print(self.name)\n\n    def __str__(self):\n        return f\"Person: {self.name} - {self.age}\"\n\n\nclass Student(Person):\n    def __init__(self, num_student, name, age):\n        self.num_student = num_student\n        # appel du constrcteur parent\n        super().__init__(name, age)\n\n    def __str__(self):\n        return f\"Student {self.num_student}, Parent __str__:\" + super().__str__()\n\n\npDico = {\"name\": \"dfsdfs\", \"age\": 230}\n\np1 = Person(\"John\", 36)\n\nprint(p1.name)\nprint(p1.age)\np1.age = 10\np1.say_name()\nprint(p1, pDico)\n\ns = Student(\"2323JFLSJ\", \"A\", 19)\nprint(s)\n</code></pre>"},{"location":"python-poo/#notions-de-statique-et-abstrait","title":"Notions de statique et abstrait","text":"<ul> <li>Notion de Propri\u00e9t\u00e9, m\u00e9thode ou classe statique:<ul> <li>Propri\u00e9t\u00e9 d'instance : chaque instance a ses propres prori\u00e9t\u00e9s d'instances</li> <li>Propri\u00e9t\u00e9 statique : elle sera partag\u00e9e entre toutes les instances (comme une variable globale pour la classe)</li> <li>M\u00e9thode d'instance : sera ex\u00e9cut\u00e9e dans le contexte de l'instance qui l'a appel\u00e9e (accessible via <code>self</code>)</li> <li>M\u00e9thode statique : m\u00e9thode qui a comme contexte que les propri\u00e9t\u00e9 et m\u00e9thodes statiques de sa classe</li> <li>Classe statique : une classe qui ne peut pas \u00eatre instanci\u00e9e et ne contiendra donc que des propri\u00e9t\u00e9 et m\u00e9thodes statiques</li> </ul> </li> <li>M\u00e9thode, propri\u00e9t\u00e9 et classe abstraite:<ul> <li>M\u00e9thode abstraite: m\u00e9thode qui n'a pas d'impl\u00e9mentation</li> <li>Propri\u00e9t\u00e9 abstraite: propri\u00e9t\u00e9 dont les accesseurs ne sont pas d\u00e9finis</li> <li>Classe abstraite: une classe qui a au moins une propri\u00e9t\u00e9 ou m\u00e9thode abstraite</li> <li>Les membres abstraits sont destin\u00e9s \u00e0 \u00eatre d\u00e9finis par une sous classe non abstraite.</li> </ul> </li> </ul>"},{"location":"python-tour-exercices/","title":"Exercices d'introduction","text":"<ul> <li>English: This page isn't translated to English.</li> </ul>"},{"location":"python-tour-exercices/#exercices-dintroduction","title":"Exercices d'introduction","text":""},{"location":"python-tour-exercices/#serie-1","title":"S\u00e9rie 1","text":""},{"location":"python-tour-exercices/#serie-2-fonctions","title":"S\u00e9rie 2: fonctions","text":""},{"location":"python-tour-exercices/#serie-3-listes","title":"S\u00e9rie 3: listes","text":""},{"location":"python-tour.en/","title":"Language Tour","text":"<ul> <li>Fran\u00e7ais</li> </ul>"},{"location":"python-tour.en/#python-language-tour","title":"Python Language Tour","text":"<p>We will take a tour of the Python language without necessarily covering everything as it is very rich in features.</p> <p>Warning</p> <p>As the Python language frequently evolves and brings improvements and simplifications, the code examples seen here may be different from what you find in the literature.</p>"},{"location":"python-tour.en/#getting-started","title":"Getting Started","text":"<ul> <li>Open VSCode in an empty folder</li> <li>Create a file hello.py containing <code>print(\"Hello\")</code></li> <li>Run the command <code>python hello.py</code></li> <li>Some code to get an idea of the language</li> </ul> <pre><code># This is a comment\na = 10\nprint(a)\na = \"hello\"\nprint(a)\nprint(\"The value of a is\", a)\n\na = \"22\"\nb = 10\n# erreur car python est fortement typ\u00e9 et n'autorise pas l'addition sur deux types diff\u00e9rents\n# c = a + b\n# print(\"a + b\", c)\nprint(a + str(b), int(a) + b)\n\nif b == 10:\n    print(b)\n    print(b)\nelse:\n    print(\"b diff\u00e9rent de 10 / b is not 10\")\n\n\ndef add(x, y):\n    print(f\"addition of {x} and {y}\")\n    return x + y\n\n\n# A function can be documented with optional type hints and a docstring\ndef multiply(x: int, y: int) -&gt; int:\n    \"\"\"\n    Multiply x and y\n    Parameters:\n        x: first number\n        y: second number\n    Returns:\n        the result of the multiplication\n    \"\"\"\n    return x * y\n\n\nprint(add(-810, b))\nf = add\nprint(f(-810, b))\n\nprint(\"range demo: g\u00e9n\u00e9rateur / generator\")\nr = range(10)\nprint(r)\nprint(\"Start value\", r.start, \"pas / step\", r.step)\n\nprint(\"range loop\")\nfor item in r:\n    print(item)\n\n\nfor item in range(10):\n    print(item)\n\nfor i in range(10, 21, 3):\n    print(i)\n\nmessage = \"I \u2665\ufe0f Python\"\nfor letter in message:\n    print(letter)\n\nfor i in range(len(message)):\n    print(i, message[i])\n</code></pre>"},{"location":"python-tour.en/#some-features","title":"Some Features","text":"<ul> <li>Python is dynamically typed: a variable can change its type during its usage (opposite of statically typed)</li> <li>Python is strongly typed: each data has a type and does not change implicitly</li> <li>Python supports object-oriented and functional programming</li> <li>Indentation is used to define code blocks (instead of <code>{}</code> braces commonly found in other languages)<ul> <li>The indentation size should be consistent within the same block</li> <li>It is recommended to have an indentation of 4 spaces</li> </ul> </li> <li>There are several programming conventions, but they have many common points. The official convention is called pep 8. Here are some rules and recommendations:<ul> <li>Snake case for functions. Ex. <code>find_student()</code></li> <li>Use spaces for indentation and avoid using the tab key</li> </ul> </li> </ul>"},{"location":"python-tour.en/#basic-types-and-operations","title":"Basic Types and Operations","text":"<ul> <li>Integer (int), float, and complex numbers</li> <li>Strings</li> <li>Boolean values and boolean operators <code>and</code>, <code>or</code>, and <code>not</code></li> <li>Comparison operators <code>&gt;</code>, <code>&lt;</code>, ... that return a boolean<ul> <li><code>is</code> allows testing the identity between two objects. Its result can be customized.</li> <li><code>==</code> is sometimes equivalent to <code>is</code></li> </ul> </li> <li>As Python is strongly typed, converting a value to another type must be done explicitly using <code>int()</code>, <code>float()</code>, <code>complex()</code>, <code>str()</code>, ...</li> </ul> <pre><code># https://www.w3schools.com/python/python_operators.asp\n\nx = 15\nprint(\"puissance\", x**10, \"partie enti\u00e8re de la division\", x // 4)\n\n# * a plus de priorit\u00e9 par rapport \u00e0 +\nprint(1 + 2 * 3)\n\nprint(10 &lt; x and x &lt; 20, \"est equivalent \u00e0\", 10 &lt; x &lt; 20)\n\nc = ((i, j) for i in (True, False) for j in (True, False))\n\nfor i, j in c:\n    print(i, \"and\", j, i and j)\n    print(i, \"or\", j, i or j)\n    print(\"not\", i, not j)\n\nprint(10 in range(50))\nprint(10 in range(0, 50, 3))\nprint(10 not in [1, 2, 10, 33])\n\n# &amp;&amp; -&gt; and (attention &amp; a un comportement diff\u00e9rent)\n</code></pre>"},{"location":"python-tour.en/#exceptions","title":"Exceptions","text":"<pre><code>def f_that_throws(b):\n    if b:\n        return \"Success\"\n    else:\n        raise Exception()\n\n\nprint(f_that_throws(True))\n# Crash si on n'attrape pas l'exception\n# print(f_that_throws(False))\n\ntry:\n    print(f_that_throws(True))\n    print(\"Before\")\n    f_that_throws(False)\n    print(\"After\")\nexcept Exception:\n    print(\"Oups\")\n</code></pre>"},{"location":"python-tour.en/#standard-collections","title":"Standard Collections","text":"<ul> <li>Collection: a type (or structure) of data that allows managing a set of data</li> <li>Python offers several built-in collection types</li> <li>Here are the 4 most commonly used types: list, dict, set, and tuple</li> </ul> <pre><code># List: \u00e9l\u00e9ments ordonn\u00e9es. Chauqe \u00e9l\u00e9ment est d\u00e9fini par sont indice\nnumbers = [3, 4, -3, \"hello\", True, 390]\nnumbers.append(10)\nnumbers.append(100)\nnumbers.remove(3)\nprint(numbers)\nprint(numbers[0], numbers[-1], numbers[-2])\n\nprint(numbers[0:3], numbers[:3], numbers[1:5])\nprint(numbers[-3:-1], numbers[2:])\n\nfor number in numbers:\n    print(number)\n\nfor i in range(len(numbers)):\n    print(i, numbers[i])\n\n# Dictionnaires: \u00e9lements identidifi\u00e9s par une cl\u00e9 (on parle aussi de couples cl\u00e9/valeur)\npokemon1 = {\"name\": \"Pikachu\", \"hp\": 10, \"type\": \"Thunder\", 5: \"une valeur\"}\nprint(\n    pokemon1,\n    pokemon1[\"name\"],\n    pokemon1[\"type\"],\n    pokemon1[5],\n    \"name\" in pokemon1,\n    \"surname\" in pokemon1,\n)\n\nfor key, value in pokemon1.items():\n    print(key, value)\n\n# Set (ensemble) : \u00e9lements non ordonn\u00e9es et uniques\nmessages = {\"hello\", \"world\", 2023}\nprint(messages, \"hello\" in messages, 2024 in messages)\nmessages.add(2023)\nprint(messages)\n\nfor message in messages:\n    print(message)\n\n# Tuple : \u00e9l\u00e9ments ordonn\u00e9es immutable (on ne peut ajouter ou supprimer d'\u00e9l\u00e9ments). On peut le consid\u00e9rer comme une liste immutable\nn1 = (12, 34, 55, 33)\nprint(n1, n1[2:])\n\nfor item in n1:\n    print(item)\n\nfor i in range(len(n1)):\n    print(i, n1[i])\n</code></pre>"},{"location":"python-tour.en/#list-dictionary-and-set-comprehension","title":"List, Dictionary, and Set Comprehension","text":"<ul> <li>Allows creating a new list, dictionary, or set from an existing collection</li> <li>Allows replacing certain operations that would have been done with loops</li> <li>For a list <code>[f(index) for index in input_seq if condition]</code> (<code>input_seq</code> is a list, tuple, or any iterable sequence with an index)</li> <li>For a list <code>[f(item) for item in input_seq if condition]</code> (<code>input_seq</code> is a list, tuple, or any iterable sequence)</li> <li>For a dictionary <code>{f_key(item):f_value(item) for item in input_seq if condition}</code> (<code>input_seq</code> is an iterable sequence)</li> <li><code>f, f_key, f_value</code> are arbitrary functions</li> <li>The <code>if condition</code> part is optional</li> <li>It is also possible to replace nested loops with a single comprehension</li> </ul> <pre><code>items = [0, 1, 2, 3, 4]\n\n# Double de chaque \u00e9l\u00e9ment\ndouble_items_1 = []\nfor item in items:\n    double_items_1.append(item * 2)\nprint(\"double_items_1\", double_items_1)\n\n# Transformer (to map en Anglais) avec les compr\u00e9hensions\nresults = [item * 2 for item in items]\nprint(results)\nprint([item * 2 for item in items])\n# puissance 4 des entier entre -2 et 9 avec un pas de 2\nprint([item**4 for item in range(-2, 10, 2)])\n\n# Filtrage\n# Garder uniquement les \u00e9l\u00e9ments pairs\nitems = [9, 22, -2, 11, 1232, 2323]\nprint([item for item in items if item % 2 == 0])\n\n# Equivalent avec un boucle for\nresults = []\nfor item in items:\n    if item % 2 == 0:\n        results.append(item)\nprint(results)\n\n# Garder uniquement les \u00e9l\u00e9ments pairs et les multiplier par 3\nprint([item * 3 for item in items if item % 2 == 0])\n\nmessages = [\"Hello\", \"J'aime\", \"Python\"]\nprint([len(message) for message in messages])\nprint([f\"{message}.\" for message in messages])\n# Dict (dictionnaire)\nprint({message: len(message) for message in messages})\n# Set ensemble\nprint({len(message) for message in messages})\n\n# Card game from ranks and symbols\nranks = range(1, 11)\nsymbols = [\"\ud83d\udc97\", \"\u2660\ufe0f\", \"\ud83c\udf40\", \"\ud83d\udd36\"]\n# Produit cart\u00e9sien\nprint([f\"{r}{s}\" for r in ranks for s in symbols])\n\nm = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint([item for row in m for item in row])\nrow_count = range(len(m))\nprint([f\"m[{i}, {j}] =&gt; {m[i][j]}\" for i in row_count for j in range(len(m[i]))])\n\n# Equivalent en for\nresult = []\nfor i in row_count:\n    for j in range(len(m[i])):\n        result.append(f\"m[{i}, {j}] =&gt; {m[i][j]}\")\nprint(\"Tranformation matrice vers liste avec for\", result)\n\n# Pour faire une compr\u00e9hension de tuple, il faut utiliser tuple()\nprint(tuple(x + 6 for x in range(10)))\n</code></pre>"},{"location":"python-tour.en/#using-a-third-party-library","title":"Using a Third-Party Library","text":"<ul> <li>Even though Python's standard library is rich, we often need to use third-party libraries to speed up development</li> <li>The standard repository for Python libraries is PyPI (Python Package Index)</li> <li>We can use its search engine to find a library. For example, let's search for the matplotlib library</li> <li>Once on the library's page, we can find the command to install it locally. For matplotlib, the command will be <code>pip install matplotlib</code> (if pip is not found, try with <code>python -m pip install matplotlib</code>)</li> <li>Then, we can use the library by referring to its documentation. For example, matplotlib offers tutorials which is a good starting point.</li> </ul>"},{"location":"python-tour.en/#sources-and-references","title":"Sources and References","text":"<ul> <li>Python List Comprehension: single, multiple, nested, &amp; more</li> </ul>"},{"location":"python-tour/","title":"\ud83d\udc0d Tour du langage","text":"<ul> <li>English</li> </ul>"},{"location":"python-tour/#tour-du-langage-python","title":"Tour du langage Python","text":"<p>Nous allons faire un tour du langage Python sans forc\u00e9ment tout couvrir car il est tr\u00e8s riche en fonctionnalit\u00e9s.</p> <p>Warning</p> <p>Comme le langage Python \u00e9volue apporte fr\u00e9quemment des am\u00e9lioration et simplifications, il se peut que les exemples de code vues ici soient diff\u00e9rents de ce que vous trouvez dans la litt\u00e9rature.</p>"},{"location":"python-tour/#premiers-pas","title":"Premiers pas","text":"<ul> <li>Ouvrir VSCode dans un dossier vierge</li> <li>Cr\u00e9er un fichier hello.py contenant <code>print(\"Hello\")</code></li> <li>Lancer la commande <code>python hello.py</code></li> <li>Un peu de code pour avoir une id\u00e9e du langage</li> </ul> <pre><code># This is a comment\na = 10\nprint(a)\na = \"hello\"\nprint(a)\nprint(\"The value of a is\", a)\n\na = \"22\"\nb = 10\n# erreur car python est fortement typ\u00e9 et n'autorise pas l'addition sur deux types diff\u00e9rents\n# c = a + b\n# print(\"a + b\", c)\nprint(a + str(b), int(a) + b)\n\nif b == 10:\n    print(b)\n    print(b)\nelse:\n    print(\"b diff\u00e9rent de 10 / b is not 10\")\n\n\ndef add(x, y):\n    print(f\"addition of {x} and {y}\")\n    return x + y\n\n\n# A function can be documented with optional type hints and a docstring\ndef multiply(x: int, y: int) -&gt; int:\n    \"\"\"\n    Multiply x and y\n    Parameters:\n        x: first number\n        y: second number\n    Returns:\n        the result of the multiplication\n    \"\"\"\n    return x * y\n\n\nprint(add(-810, b))\nf = add\nprint(f(-810, b))\n\nprint(\"range demo: g\u00e9n\u00e9rateur / generator\")\nr = range(10)\nprint(r)\nprint(\"Start value\", r.start, \"pas / step\", r.step)\n\nprint(\"range loop\")\nfor item in r:\n    print(item)\n\n\nfor item in range(10):\n    print(item)\n\nfor i in range(10, 21, 3):\n    print(i)\n\nmessage = \"I \u2665\ufe0f Python\"\nfor letter in message:\n    print(letter)\n\nfor i in range(len(message)):\n    print(i, message[i])\n</code></pre>"},{"location":"python-tour/#quelques-caracteristiques","title":"Quelques caract\u00e9ristiques","text":"<ul> <li>Python est dynamiquement typ\u00e9: une variable peut changer de type durant son utilisation (contraire de statiquement typ\u00e9)</li> <li>Python est fortement typ\u00e9: chaque donn\u00e9e a un type et ne change pas de fa\u00e7on implicite</li> <li>Python supporte la programmation orient\u00e9 objet et fonctionnelle</li> <li>Les indentations sont utilis\u00e9es pour d\u00e9finir les blocs de code (au lieu des <code>{}</code> accolades qu'on trouve usuellement dans d'autres langages)<ul> <li>La taille de l'indentation doit \u00eatre consistance au sein du m\u00eame block</li> <li>Il est recommand\u00e9 d'avoir une indentation de 4 espaces</li> </ul> </li> <li>Il existe plusieurs conventions de programmation mais qui on beaucoup de points communs. La convention officielle est appel\u00e9e pep 8. Voici quelques r\u00e8gles et recommandations:<ul> <li>Snake case pour les fonctions. Ex. <code>find_student()</code></li> <li>Utiliser des espaces pour d\u00e9finir l'indentation et \u00e9viter d'utiliser la touche tab</li> </ul> </li> </ul>"},{"location":"python-tour/#types-et-operations-de-base","title":"Types et op\u00e9rations de base","text":"<ul> <li>Nombres entier (int), r\u00e9el (float) et complexes (complex)</li> <li>Chaines de caract\u00e8res (String)</li> <li>Valeurs bool\u00e9ennes et op\u00e9rateurs bool\u00e9ens <code>and</code>, <code>or</code> et <code>not</code></li> <li>Op\u00e9rateurs de comparaison <code>&gt;</code>, <code>&lt;</code>, ... qui retournent un bool\u00e9en<ul> <li><code>is</code> permet de tester l'identit\u00e9 entre deux objets. Son r\u00e9sultat peut \u00eatre personnalis\u00e9.</li> <li><code>==</code> est parfois \u00e9quivalent \u00e0 <code>is</code></li> </ul> </li> <li>Comme python est fortement type, convertir un valeur vers un autre type devra se faire explicitement <code>int()</code>, <code>float()</code>, <code>complex()</code>, <code>str()</code>, ...</li> </ul> <pre><code># https://www.w3schools.com/python/python_operators.asp\n\nx = 15\nprint(\"puissance\", x**10, \"partie enti\u00e8re de la division\", x // 4)\n\n# * a plus de priorit\u00e9 par rapport \u00e0 +\nprint(1 + 2 * 3)\n\nprint(10 &lt; x and x &lt; 20, \"est equivalent \u00e0\", 10 &lt; x &lt; 20)\n\nc = ((i, j) for i in (True, False) for j in (True, False))\n\nfor i, j in c:\n    print(i, \"and\", j, i and j)\n    print(i, \"or\", j, i or j)\n    print(\"not\", i, not j)\n\nprint(10 in range(50))\nprint(10 in range(0, 50, 3))\nprint(10 not in [1, 2, 10, 33])\n\n# &amp;&amp; -&gt; and (attention &amp; a un comportement diff\u00e9rent)\n</code></pre>"},{"location":"python-tour/#exceptions","title":"Exceptions","text":"<pre><code>def f_that_throws(b):\n    if b:\n        return \"Success\"\n    else:\n        raise Exception()\n\n\nprint(f_that_throws(True))\n# Crash si on n'attrape pas l'exception\n# print(f_that_throws(False))\n\ntry:\n    print(f_that_throws(True))\n    print(\"Before\")\n    f_that_throws(False)\n    print(\"After\")\nexcept Exception:\n    print(\"Oups\")\n</code></pre>"},{"location":"python-tour/#collections-standards","title":"Collections standards","text":"<ul> <li>Collection: type (ou structure) de donn\u00e9es qui permet de g\u00e9rer un ensemble de donn\u00e9es</li> <li>Python propose plusieurs types int\u00e9gr\u00e9s de collections</li> <li>Voici les 4 types les plus usuels: list, dict, set et tuple</li> </ul> <pre><code># List: \u00e9l\u00e9ments ordonn\u00e9es. Chauqe \u00e9l\u00e9ment est d\u00e9fini par sont indice\nnumbers = [3, 4, -3, \"hello\", True, 390]\nnumbers.append(10)\nnumbers.append(100)\nnumbers.remove(3)\nprint(numbers)\nprint(numbers[0], numbers[-1], numbers[-2])\n\nprint(numbers[0:3], numbers[:3], numbers[1:5])\nprint(numbers[-3:-1], numbers[2:])\n\nfor number in numbers:\n    print(number)\n\nfor i in range(len(numbers)):\n    print(i, numbers[i])\n\n# Dictionnaires: \u00e9lements identidifi\u00e9s par une cl\u00e9 (on parle aussi de couples cl\u00e9/valeur)\npokemon1 = {\"name\": \"Pikachu\", \"hp\": 10, \"type\": \"Thunder\", 5: \"une valeur\"}\nprint(\n    pokemon1,\n    pokemon1[\"name\"],\n    pokemon1[\"type\"],\n    pokemon1[5],\n    \"name\" in pokemon1,\n    \"surname\" in pokemon1,\n)\n\nfor key, value in pokemon1.items():\n    print(key, value)\n\n# Set (ensemble) : \u00e9lements non ordonn\u00e9es et uniques\nmessages = {\"hello\", \"world\", 2023}\nprint(messages, \"hello\" in messages, 2024 in messages)\nmessages.add(2023)\nprint(messages)\n\nfor message in messages:\n    print(message)\n\n# Tuple : \u00e9l\u00e9ments ordonn\u00e9es immutable (on ne peut ajouter ou supprimer d'\u00e9l\u00e9ments). On peut le consid\u00e9rer comme une liste immutable\nn1 = (12, 34, 55, 33)\nprint(n1, n1[2:])\n\nfor item in n1:\n    print(item)\n\nfor i in range(len(n1)):\n    print(i, n1[i])\n</code></pre>"},{"location":"python-tour/#la-comprehension-des-listes-dictionnaires-et-ensembles","title":"La compr\u00e9hension des listes, dictionnaires et ensembles","text":"<ul> <li>Permet de cr\u00e9er une nouvelle liste, dictionnaire ou ensemble \u00e0 partir d'une collection existante</li> <li>Permet de remplacer certains traitements qu'on aurait d\u00fb faire avec les boucles</li> <li>Pour une liste <code>[f(index) for index in input_seq if condition]</code> (<code>input_seq</code> est une liste, tuple ou toute s\u00e9quence it\u00e9rable avec indice)</li> <li>Pour une liste <code>[f(item) for item in input_seq if condition]</code> (<code>input_seq</code> est une liste, tuple ou toute s\u00e9quence it\u00e9rable)</li> <li>Pour un dictionnaire <code>{f_key(item):f_value(item) for item in input_seq if condition}</code> (<code>input_seq</code> est une s\u00e9quence it\u00e9rable)</li> <li><code>f, f_key, f_value</code> sont des fonctions quelconques</li> <li>La partie <code>if condition</code> est optionnelle</li> <li>Il est aussi possible de remplacer les boucles imbriqu\u00e9es par une seule compr\u00e9hension</li> </ul> <pre><code>items = [0, 1, 2, 3, 4]\n\n# Double de chaque \u00e9l\u00e9ment\ndouble_items_1 = []\nfor item in items:\n    double_items_1.append(item * 2)\nprint(\"double_items_1\", double_items_1)\n\n# Transformer (to map en Anglais) avec les compr\u00e9hensions\nresults = [item * 2 for item in items]\nprint(results)\nprint([item * 2 for item in items])\n# puissance 4 des entier entre -2 et 9 avec un pas de 2\nprint([item**4 for item in range(-2, 10, 2)])\n\n# Filtrage\n# Garder uniquement les \u00e9l\u00e9ments pairs\nitems = [9, 22, -2, 11, 1232, 2323]\nprint([item for item in items if item % 2 == 0])\n\n# Equivalent avec un boucle for\nresults = []\nfor item in items:\n    if item % 2 == 0:\n        results.append(item)\nprint(results)\n\n# Garder uniquement les \u00e9l\u00e9ments pairs et les multiplier par 3\nprint([item * 3 for item in items if item % 2 == 0])\n\nmessages = [\"Hello\", \"J'aime\", \"Python\"]\nprint([len(message) for message in messages])\nprint([f\"{message}.\" for message in messages])\n# Dict (dictionnaire)\nprint({message: len(message) for message in messages})\n# Set ensemble\nprint({len(message) for message in messages})\n\n# Card game from ranks and symbols\nranks = range(1, 11)\nsymbols = [\"\ud83d\udc97\", \"\u2660\ufe0f\", \"\ud83c\udf40\", \"\ud83d\udd36\"]\n# Produit cart\u00e9sien\nprint([f\"{r}{s}\" for r in ranks for s in symbols])\n\nm = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint([item for row in m for item in row])\nrow_count = range(len(m))\nprint([f\"m[{i}, {j}] =&gt; {m[i][j]}\" for i in row_count for j in range(len(m[i]))])\n\n# Equivalent en for\nresult = []\nfor i in row_count:\n    for j in range(len(m[i])):\n        result.append(f\"m[{i}, {j}] =&gt; {m[i][j]}\")\nprint(\"Tranformation matrice vers liste avec for\", result)\n\n# Pour faire une compr\u00e9hension de tuple, il faut utiliser tuple()\nprint(tuple(x + 6 for x in range(10)))\n</code></pre>"},{"location":"python-tour/#utiliser-une-librairie-tierce","title":"Utiliser une librairie tierce","text":"<ul> <li>M\u00eame si la libraire standard de Python est riche, on a souvent besoin d'utiliser des librairies tierces pour aller plus vite</li> <li>Le d\u00e9p\u00f4t standard des librairies Python est PyPI (Python Package Index)</li> <li>On peut utiliser son moteur de recherche pour trouver un librairie. Par exemple, cherchons la libraire matplotlib</li> <li>Une fois dans la page de la librairie, on peut trouver la commande qui permet de l'installer localement. Pour matplotlib, la commande sera <code>pip install matplotlib</code> (si pip n'est pas trouv\u00e9 alors essayer avec <code>python -m pip install matplotlib</code>)</li> <li>Ensuite, on pourra utiliser la librairie en se r\u00e9f\u00e9rant \u00e0 sa documentation. Par exemple, matplotlib propose des tutoriels qui est un bon point de d\u00e9part.</li> </ul>"},{"location":"python-tour/#sources-et-references","title":"Sources et r\u00e9f\u00e9rences","text":"<ul> <li>Python List Comprehension: single, multiple, nested, &amp; more</li> </ul>"},{"location":"tkinter-exercices/","title":"Exercices de Tkinter","text":"<ul> <li>English: This page isn't translated to English.</li> </ul>"},{"location":"tkinter-exercices/#exercices","title":"Exercices","text":"<p>Consignes</p> <ul> <li>Ne pas de faire aider par des IA ou genAI</li> <li>Utiliser les composants <code>ttk</code> autant que possible</li> </ul>"},{"location":"tkinter-exercices/#serie-1","title":"S\u00e9rie 1","text":"<ol> <li>Cr\u00e9er une fen\u00eatre qui affiche un bouton dont le texte est un nombre al\u00e9toire entre 1 et 100. Chaque fois qu'on clique sur le bouton, le nombre al\u00e9atoire change.</li> <li>Cr\u00e9er une fen\u00eatre qui affiche un bouton \"Quitter\" et un texte editable. G\u00e9rer le comportement suivant quand on clique sur le bouton \"Quitter\":<ul> <li>Si on n'a pas modifi\u00e9 le texte, la fen\u00eatre se ferme,</li> <li>Si on a modifi\u00e9 le texte, une bo\u00eete de dialogue demande si on veut vraiment quitter. Si on r\u00e9pond \"Oui\", la fen\u00eatre se ferme, sinon elle reste ouverte (voir astuce plus bas).</li> </ul> </li> <li>Cr\u00e9er une fen\u00eatre qui affiche un texte editable et les boutons \"sauvegarder\" et \"charger\". G\u00e9rer le comportement suivant:<ul> <li>Quand on clique sur \"sauvegarder\", le texte est sauvegard\u00e9 dans un fichier texte,</li> <li>Quand on clique sur \"charger\", le texte est charg\u00e9 depuis le fichier texte et est affich\u00e9 dans la zone \u00e9ditable (voir astuce plus bas).</li> </ul> </li> <li>Cr\u00e9er une fen\u00eatre qui affiche deux textes editables et les boutons \"sauvegarder\" et \"charger\". G\u00e9rer le comportement suivant:<ul> <li>Quand on clique sur \"sauvegarder\", le texte de la premi\u00e8re zone \u00e9ditable est sauvegard\u00e9 dans un fichier texte. Le nom du fichier est d\u00e9termin\u00e9 par le texte de la deuxi\u00e8me zone \u00e9ditable,</li> <li>Quand on clique sur \"charger\", le texte est charg\u00e9 depuis le fichier texte et est affich\u00e9 dans la zone \u00e9ditable. Le nom du fichier est d\u00e9termin\u00e9 par le texte de la deuxi\u00e8me zone \u00e9ditable.</li> </ul> </li> </ol>"},{"location":"tkinter-exercices/#astuces","title":"Astuces","text":"G\u00e9n\u00e9rer un nombre al\u00e9atoire<pre><code>import random\nnombre = random.randint(1, 100)\n</code></pre> Fermer une fen\u00eatre tk<pre><code>window.destroy()\n</code></pre> message box<pre><code>import tkinter.messagebox as mb\nanwser = mb.askyesno(title=\"Confirmer?\", message=\"Voulez-vous quitter ?\")\n</code></pre> Sauvegarder et charger un fichier<pre><code>def sauvegarder(texte):\n    with open(\"fichier.txt\", \"w\") as f:\n        f.write(texte)\n\ndef charger():\n    with open(\"fichier.txt\", \"r\") as f:\n        return f.read()\n</code></pre> Afficher une image depuis un fichier avec tkinter<pre><code>from tkinter import PhotoImage\n\nimg = PhotoImage(file=\"image.png\")\nlabel = Label(fenetre, image=img)\nlabel.pack()\n</code></pre>"},{"location":"tkinter-exercices/#solutions","title":"Solutions","text":"Random number button <pre><code>import random\nfrom playsound import playsound\nimport tkinter as tk\nfrom tkinter import ttk\n\nwindow = tk.Tk()\nwindow.geometry(200, 200)\n\nbutton: ttk.Button = None\n\n\ndef get_rand_int_as_str() -&gt; str:\n    r = random.randint(1, 100)\n    return str(r)\n\n\ndef change_label():\n    if button == None:\n        return\n    button.configure(text=get_rand_int_as_str())\n\n\nbutton = ttk.Button(window, text=get_rand_int_as_str(), command=change_label)\n\nbutton.place(relx=0.5, rely=0.5, anchor=tk.CENTER)\nwindow.mainloop()\n</code></pre> Confirm quit <pre><code>import tkinter as tk\nfrom tkinter import ttk\nimport tkinter.messagebox as mb\n\nwindow = tk.Tk()\nwindow.geometry(\"200x200\")\n\nentered_text = tk.StringVar()\ntextbox = ttk.Entry(window, textvariable=entered_text)\ntextbox.pack(pady=50)\n\n\ndef quit_app():\n    if len(entered_text.get()) == 0:\n        window.destroy()\n        return\n    anwser = mb.askyesno(title=\"Confirmer\", message=\"Voulez-vous quitter ?\")\n    if anwser:\n        window.destroy()\n        return\n\n\nrun_button = ttk.Button(window, text=\"Quit \ud83d\udc4b\", command=quit_app)\nrun_button.pack()\n\nwindow.mainloop()\n</code></pre>"},{"location":"tkinter-exercices/#serie-2","title":"S\u00e9rie 2","text":"<ol> <li>Cr\u00e9er une fen\u00eatre qui affiche une image depuis un fichier.</li> <li>Cr\u00e9er une fen\u00eatre qui affiche une zone de saisie de texte et un bouton. Quand l'utilisateur appuie sur le bouton, l'image dont le nom est d\u00e9finie par le zone de saisie est affich\u00e9e en dessous.</li> <li>Avec la librairie playsound, cr\u00e9er une fen\u00eatre qui joue un son quand on clique sur un bouton.<ul> <li>Vous pouvez utiliser ce tuto pour vous aider</li> <li>Vous pouvez utiliser ce site pour trouver des sons ou t\u00e9l\u00e9charger cet exemple</li> <li>Si <code>pip install playsound</code> ne fonctionne pas, vous pouvez essayer <code>pip install playsound@git+https://github.com/taconi/playsound</code></li> </ul> </li> <li>Utiliser tkvideoplayer pour cr\u00e9er une fen\u00eatre qui lit une vid\u00e9o.</li> </ol>"},{"location":"tkinter-exercices/#solutions_1","title":"Solutions","text":"Play music <pre><code># importing required module\nfrom playsound import playsound\nimport tkinter as tk\nfrom tkinter import ttk\n\nwindow = tk.Tk()\nwindow.title(\"GeeksforGeeks sound player\")  # giving the title for our window\nwindow.geometry(\"500x400\")\n\n\n# making function\ndef play():\n    playsound(\"sample-3s.mp3\")\n\n\n# title on the screen you can modify it\ntitle = ttk.Label(\n    window,\n    text=\"Sample sound\",\n)\ntitle.pack()\n\n# making a button which trigger the function so sound can be playeed\nplay_button = ttk.Button(window, text=\"Play Song\", command=play)\nplay_button.pack()\n\ninfo = ttk.Label(window, text=\"Click on the button above to play song \").pack(pady=20)\nwindow.mainloop()\n</code></pre>"},{"location":"tkinter-exercices/#serie-3","title":"S\u00e9rie 3","text":"<ol> <li>En utilisant tkinter.scrolledtext Cr\u00e9er une application qui permet de saisir du texte, de le sauvegarder dans un fichier et de le charger.</li> <li>Cr\u00e9er une application qui permet de saisir du texte, de le sauvegarder dans un fichier et de le charger. Elle permet aussi de m\u00e9moriser la derni\u00e8re modification et permet de la restaurer \u00e0 l'aider du bouton \"Annuler\". Si la modification est restaur\u00e9e, le bouton \"Annuler\" devient \"Refaire\" et permet de r\u00e9tablir la modification.</li> <li>Modifier l'application pour m\u00e9moriser les 10 derni\u00e8res modifications, le bouton \"Annuler\" permet de revenir en arri\u00e8re et le bouton \"Refaire\" permet de revenir en avant. Le comportement devrait \u00eatre similaire aux \u00e9diteurs de texte classiques.</li> <li>Associer les raccourcis clavier \u00e0 chaque bouton. Par exemple, <code>Ctrl+S</code> pour sauvegarder, <code>Ctrl+Z</code> pour annuler, <code>Ctrl+Y</code> pour refaire, etc.</li> </ol>"},{"location":"tkinter/","title":"Tkinter","text":"<ul> <li>English: This page isn't translated to English.</li> </ul>"},{"location":"tkinter/#tkinter","title":"Tkinter","text":"<p>Tkinter est une biblioth\u00e8que graphique pour Python. Elle permet de cr\u00e9er des interfaces graphiques (GUI) de mani\u00e8re simple et rapide.</p>"},{"location":"tkinter/#premiers-pas","title":"Premiers pas","text":"<p>Sur macOS, il faut probabelemnt installer la librairie <code>pip install tk</code></p> Fen\u00eatre basqiue<pre><code>import tkinter as tk\n\nwindow = tk.Tk()\n\nwindow.mainloop()\n</code></pre> <p></p> Deux boutons et un texte<pre><code>import tkinter as tk\n\n# widget ou controle: tout composant de l'interface graphique: bouton, label, image, etc. (windows + gadget)\n\nwindow = tk.Tk()\nwindow.geometry(\"600x300\")\n\nlabel = tk.Label(window, text=\"Hello World\")\n\n\ndef print_message():\n    print(\"Button clicked\")\n\n\ndef change_size():\n    print(\"Nouvelle dimension de fen\u00eatre\")\n    window.geometry(\"500x200\")\n\n\n# command: on dit que c'est une callback\nbutton = tk.Button(window, text=\"Click Me\", command=print_message)\nbutton2 = tk.Button(window, text=\"Click Me Here\", command=change_size)\n# Lay or put the widgets into the window\nbutton.pack()\nlabel.pack()\nbutton2.pack()\n# pour placer une ligne de code\ntk.Label(window, text=\"Autre texte\").pack()\n\nwindow.mainloop()\n</code></pre> <p></p>"},{"location":"tkinter/#ttk","title":"TTk","text":"<p>Les composants <code>ttk</code> sont des composants am\u00e9lior\u00e9s de Tkinter. Ils sont plus modernes, plus jolis et s'adaptent mieux \u00e0 l'OS (Operating System). Par exemple, ils utilisent les couleurs du th\u00e8me de l'OS (mode sombre par exemple).</p> Composants ttk<pre><code>import tkinter as tk\nfrom tkinter import ttk\n\n# widget: tout composant de l'interface graphique: bouton, label, image, etc. (windows + gadget)\n\nwindow = tk.Tk()\nwindow.geometry(\"600x300\")\n\nlabel = ttk.Label(window, text=\"Hello World\")\n\n\ndef print_message():\n    print(\"Button clicked\")\n\n\ndef change_size():\n    print(\"Nouvelle dimension de fen\u00eatre\")\n    window.geometry(\"500x200\")\n\n\n# command: on dit que c'est une callback\nbutton = ttk.Button(window, text=\"Click Me\", command=print_message)\nbutton2 = ttk.Button(window, text=\"Click Me Here\", command=change_size)\nbutton.pack()\nlabel.pack()\nbutton2.pack()\n# pour placer une ligne de code\nttk.Label(window, text=\"Autre texte\").pack()\n\nwindow.mainloop()\n</code></pre> <p></p>"},{"location":"tkinter/#texte-editable","title":"Texte editable","text":"Texte editable<pre><code>import tkinter as tk\nfrom tkinter import ttk\n\nwindow = tk.Tk()\nwindow.geometry(\"600x300\")\n\nentered_text = tk.StringVar()\ntextbox = ttk.Entry(window, textvariable=entered_text)\ntextbox.pack()\n\n\ndef run_prompt():\n    print(\"prompt saisi\", entered_text.get())\n    print(\"prompt saisi\", textbox.get())\n    response = f\"R\u00e9ponse \u00e0 la main pour le prompt {entered_text.get()}. A remplacer par une vraie r\u00e9ponse\"\n    print(\"r\u00e9ponse\", response)\n\n\ndef reset_entry():\n    entered_text.set(\"\")\n\n\nrun_button = ttk.Button(window, text=\"Run\", command=run_prompt)\nrun_button.pack()\n\nclear_button = ttk.Button(window, text=\"Clear\", command=reset_entry)\nclear_button.pack()\n\nwindow.mainloop()\n</code></pre> Texte editable + ajout de contenu \u00e0 la vol\u00e9e<pre><code>import tkinter as tk\nfrom tkinter import ttk\nfrom datetime import datetime\n\n\nprompts = []\n\nwindow = tk.Tk()\nwindow.geometry(\"600x300\")\n\nentered_text = tk.StringVar()\nhistory_content = tk.StringVar()\ntextbox = ttk.Entry(window, textvariable=entered_text)\ntextbox.pack()\n\n\ndef run_prompt():\n    print(\"prompt saisi\", entered_text.get())\n    print(\"prompt saisi\", textbox.get())\n    response = f\"R\u00e9ponse \u00e0 la main pour le prompt {entered_text.get()}. A remplacer par une vraie r\u00e9ponse\"\n    print(\"r\u00e9ponse\", response)\n    prompt = {\n        \"query\": entered_text.get(),\n        \"response\": response,\n        \"date\": datetime.now(),\n    }\n    prompts.append(prompt)\n    print(prompts)\n    temp_history_content = \"\"\n    for prompt in prompts:\n        temp_history_content += f\"query: {prompt['query']} \\n\"\n        temp_history_content += f\"responst: {prompt['response']} \\n\"\n        temp_history_content += f\"date: {prompt['date']} \\n\"\n        temp_history_content += f\"\\n--------------\\n\"\n    history_content.set(temp_history_content)\n\n\ndef reset_entry():\n    entered_text.set(\"\")\n\n\nrun_button = ttk.Button(window, text=\"Run\", command=run_prompt)\nrun_button.pack()\n\nclear_button = ttk.Button(window, text=\"Clear\", command=reset_entry)\nclear_button.pack()\n\nhistory = ttk.Label(window, textvariable=history_content)\nhistory.pack()\n\nwindow.mainloop()\n</code></pre>"}]}